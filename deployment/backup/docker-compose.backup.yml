version: '3.9'

# AI Teddy Bear Backup Services Docker Compose Configuration
# Comprehensive backup and restore system with monitoring

services:
  backup-orchestrator:
    build:
      context: ../../
      dockerfile: deployment/backup/Dockerfile.backup
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-latest}
    container_name: ai-teddy-backup-orchestrator
    restart: unless-stopped
    
    environment:
      # Environment Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${BACKUP_LOG_LEVEL:-INFO}
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_BACKUP_URL:?DATABASE_BACKUP_URL is required}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-5}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-10}
      
      # Redis Configuration (for coordination)
      - REDIS_URL=${REDIS_BACKUP_URL:-redis://redis:6379/1}
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-5}
      
      # Encryption and Security
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY:?BACKUP_ENCRYPTION_KEY is required}
      - COPPA_ENCRYPTION_KEY=${COPPA_ENCRYPTION_KEY:?COPPA_ENCRYPTION_KEY is required}
      
      # AWS S3 Configuration
      - AWS_ACCESS_KEY_ID=${AWS_BACKUP_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_BACKUP_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_BACKUP_REGION:-us-east-1}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
      
      # Azure Storage Configuration
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_BACKUP_CONNECTION_STRING}
      - AZURE_BACKUP_CONTAINER=${AZURE_BACKUP_CONTAINER:-backups}
      
      # MinIO Configuration
      - MINIO_ENDPOINT=${MINIO_BACKUP_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_BACKUP_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_BACKUP_SECRET_KEY}
      - MINIO_BACKUP_BUCKET=${MINIO_BACKUP_BUCKET:-backups}
      
      # Backup Configuration
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-90}
      - BACKUP_COMPRESSION_ENABLED=${BACKUP_COMPRESSION_ENABLED:-true}
      - BACKUP_ENCRYPTION_ENABLED=${BACKUP_ENCRYPTION_ENABLED:-true}
      - COPPA_COMPLIANCE_MODE=${COPPA_COMPLIANCE_MODE:-true}
      
      # Backup Scheduling
      - HOURLY_BACKUP_ENABLED=${HOURLY_BACKUP_ENABLED:-true}
      - DAILY_BACKUP_ENABLED=${DAILY_BACKUP_ENABLED:-true}
      - WEEKLY_BACKUP_ENABLED=${WEEKLY_BACKUP_ENABLED:-true}
      - MONTHLY_BACKUP_ENABLED=${MONTHLY_BACKUP_ENABLED:-true}
      
      # Performance Configuration
      - BACKUP_PARALLEL_JOBS=${BACKUP_PARALLEL_JOBS:-2}
      - BACKUP_CHUNK_SIZE_MB=${BACKUP_CHUNK_SIZE_MB:-100}
      - BACKUP_TIMEOUT_MINUTES=${BACKUP_TIMEOUT_MINUTES:-120}
      
      # Monitoring Configuration
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - PROMETHEUS_PORT=${BACKUP_PROMETHEUS_PORT:-9090}
      - SENTRY_DSN=${BACKUP_SENTRY_DSN}
      
      # Notification Configuration
      - ALERT_EMAIL_ENABLED=${ALERT_EMAIL_ENABLED:-true}
      - ALERT_EMAIL_SMTP_SERVER=${ALERT_EMAIL_SMTP_SERVER}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - SLACK_WEBHOOK_URL=${BACKUP_SLACK_WEBHOOK_URL}
      - PAGERDUTY_INTEGRATION_KEY=${BACKUP_PAGERDUTY_KEY}
      
      # Testing Configuration
      - BACKUP_TESTING_ENABLED=${BACKUP_TESTING_ENABLED:-true}
      - BACKUP_TESTING_SCHEDULE=${BACKUP_TESTING_SCHEDULE:-0 2 * * 0}  # Weekly
      - DISASTER_RECOVERY_TESTING_ENABLED=${DR_TESTING_ENABLED:-false}
    
    volumes:
      # Backup storage
      - backup_data:/app/backups
      - backup_logs:/app/logs
      
      # Configuration
      - ./config/backup:/app/config:ro
      
      # Encryption keys (secure mount)
      - backup_keys:/app/keys:ro
      
      # Database socket (if using Unix socket)
      - /var/run/postgresql:/var/run/postgresql:ro
    
    ports:
      - "${BACKUP_PROMETHEUS_PORT:-9090}:9090"  # Prometheus metrics
    
    depends_on:
      - postgres
      - redis
    
    networks:
      - backup-network
      - teddy-network
    
    healthcheck:
      test: ["/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: "5"
        labels: "service=backup-orchestrator"

  backup-scheduler:
    image: ai-teddy-backup-orchestrator  # Reuse the same image
    container_name: ai-teddy-backup-scheduler
    restart: unless-stopped
    
    command: ["python", "/app/scripts/backup_scheduler.py"]
    
    environment:
      # Inherit most environment variables from orchestrator
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_BACKUP_URL:?DATABASE_BACKUP_URL is required}
      - REDIS_URL=${REDIS_BACKUP_URL:-redis://redis:6379/1}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY:?BACKUP_ENCRYPTION_KEY is required}
      - LOG_LEVEL=${BACKUP_LOG_LEVEL:-INFO}
      
      # Scheduler-specific configuration
      - SCHEDULER_CHECK_INTERVAL_SECONDS=${SCHEDULER_CHECK_INTERVAL:-60}
      - BACKUP_QUEUE_MAX_SIZE=${BACKUP_QUEUE_MAX_SIZE:-10}
    
    volumes:
      - backup_data:/app/backups
      - backup_logs:/app/logs
      - ./config/backup:/app/config:ro
      - backup_keys:/app/keys:ro
    
    depends_on:
      - backup-orchestrator
      - redis
    
    networks:
      - backup-network
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  backup-monitor:
    image: ai-teddy-backup-orchestrator  # Reuse the same image
    container_name: ai-teddy-backup-monitor
    restart: unless-stopped
    
    command: ["python", "-m", "src.infrastructure.backup.monitoring"]
    
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_BACKUP_URL:?DATABASE_BACKUP_URL is required}
      - REDIS_URL=${REDIS_BACKUP_URL:-redis://redis:6379/1}
      - LOG_LEVEL=${BACKUP_LOG_LEVEL:-INFO}
      
      # Monitoring-specific configuration
      - MONITORING_CHECK_INTERVAL_MINUTES=${MONITORING_CHECK_INTERVAL:-15}
      - COMPLIANCE_REPORT_SCHEDULE=${COMPLIANCE_REPORT_SCHEDULE:-0 1 * * *}  # Daily
      - ALERT_ESCALATION_ENABLED=${ALERT_ESCALATION_ENABLED:-true}
      
      # Notification settings
      - ALERT_EMAIL_ENABLED=${ALERT_EMAIL_ENABLED:-true}
      - ALERT_EMAIL_SMTP_SERVER=${ALERT_EMAIL_SMTP_SERVER}
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - SLACK_WEBHOOK_URL=${BACKUP_SLACK_WEBHOOK_URL}
      - PAGERDUTY_INTEGRATION_KEY=${BACKUP_PAGERDUTY_KEY}
    
    volumes:
      - backup_data:/app/backups:ro
      - backup_logs:/app/logs
      - ./config/backup:/app/config:ro
    
    depends_on:
      - backup-orchestrator
    
    networks:
      - backup-network
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  backup-testing:
    image: ai-teddy-backup-orchestrator  # Reuse the same image
    container_name: ai-teddy-backup-testing
    restart: "no"  # Only run when explicitly started
    
    command: ["python", "/app/scripts/backup_test_runner.py"]
    
    environment:
      - ENVIRONMENT=testing
      - DATABASE_URL=${DATABASE_TEST_URL:-${DATABASE_BACKUP_URL}}
      - REDIS_URL=${REDIS_BACKUP_URL:-redis://redis:6379/1}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY:?BACKUP_ENCRYPTION_KEY is required}
      - LOG_LEVEL=${BACKUP_LOG_LEVEL:-INFO}
      
      # Testing configuration
      - TEST_DATA_PATH=/app/test_data
      - TEST_RESULTS_PATH=/app/test_results
      - BACKUP_TESTING_PARALLEL=${BACKUP_TESTING_PARALLEL:-false}
      - DISASTER_RECOVERY_TESTING=${DR_TESTING_ENABLED:-false}
    
    volumes:
      - backup_data:/app/backups
      - backup_logs:/app/logs
      - backup_test_data:/app/test_data
      - backup_test_results:/app/test_results
      - ./config/backup:/app/config:ro
      - backup_keys:/app/keys:ro
    
    depends_on:
      - backup-orchestrator
    
    networks:
      - backup-network
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Supporting services
  postgres:
    image: postgres:15-alpine
    container_name: ai-teddy-backup-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${BACKUP_DB_NAME:-backup_metadata}
      - POSTGRES_USER=${BACKUP_DB_USER:-backup_user}
      - POSTGRES_PASSWORD=${BACKUP_DB_PASSWORD:?BACKUP_DB_PASSWORD is required}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    
    volumes:
      - backup_postgres_data:/var/lib/postgresql/data
      - ./sql/backup_init.sql:/docker-entrypoint-initdb.d/backup_init.sql:ro
    
    ports:
      - "${BACKUP_DB_PORT:-5433}:5432"
    
    networks:
      - backup-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BACKUP_DB_USER:-backup_user} -d ${BACKUP_DB_NAME:-backup_metadata}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: ai-teddy-backup-redis
    restart: unless-stopped
    
    command: redis-server --requirepass ${BACKUP_REDIS_PASSWORD} --appendonly yes
    
    environment:
      - REDIS_PASSWORD=${BACKUP_REDIS_PASSWORD:?BACKUP_REDIS_PASSWORD is required}
    
    volumes:
      - backup_redis_data:/data
    
    ports:
      - "${BACKUP_REDIS_PORT:-6380}:6379"
    
    networks:
      - backup-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-teddy-backup-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - backup_prometheus_data:/prometheus
    
    ports:
      - "${BACKUP_PROMETHEUS_UI_PORT:-9091}:9090"
    
    depends_on:
      - backup-orchestrator
    
    networks:
      - backup-network

  grafana:
    image: grafana/grafana:latest
    container_name: ai-teddy-backup-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    volumes:
      - backup_grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "${BACKUP_GRAFANA_PORT:-3001}:3000"
    
    depends_on:
      - prometheus
    
    networks:
      - backup-network

volumes:
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_DATA_PATH:-./data/backups}
  
  backup_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_LOGS_PATH:-./logs/backup}
  
  backup_keys:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_KEYS_PATH:-./keys}
  
  backup_test_data:
    driver: local
  
  backup_test_results:
    driver: local
  
  backup_postgres_data:
    driver: local
  
  backup_redis_data:
    driver: local
  
  backup_prometheus_data:
    driver: local
  
  backup_grafana_data:
    driver: local

networks:
  backup-network:
    driver: bridge
    name: ai-teddy-backup-network
    ipam:
      config:
        - subnet: 172.25.0.0/16
  
  teddy-network:
    external: true
    name: ai-teddy-bear_teddy-network