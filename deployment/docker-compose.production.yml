version: '3.9'

name: ai-teddy-production

services:
  # PostgreSQL Database - Production Optimized
  postgres:
    image: postgres:15-alpine
    container_name: ai-teddy-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:?DB_NAME is required}
      POSTGRES_USER: ${DB_USER:?DB_USER is required}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?DB_PASSWORD is required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ../sql:/docker-entrypoint-initdb.d/:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:${DB_PORT:-5432}:5432"  # Only localhost access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - teddy-internal
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Cache - Production Secured
  redis:
    image: redis:7-alpine
    container_name: ai-teddy-redis-prod
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"  # Only localhost access
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s, 
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - teddy-internal
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Main AI Teddy Bear Application
  app:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    image: ai-teddy-app:${APP_VERSION:-latest}
    container_name: ai-teddy-app-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Environment Configuration
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Security Keys - REQUIRED FOR PRODUCTION
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required for production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?JWT_SECRET_KEY is required for production}
      - COPPA_ENCRYPTION_KEY=${COPPA_ENCRYPTION_KEY:?COPPA_ENCRYPTION_KEY is required for COPPA compliance}
      
      # Database Configuration
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-20}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-40}
      - DATABASE_POOL_TIMEOUT=${DATABASE_POOL_TIMEOUT:-30}
      - DATABASE_POOL_RECYCLE=${DATABASE_POOL_RECYCLE:-3600}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-20}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT:-5}
      - REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS:-100}
      
      # AI Services Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:?OPENAI_API_KEY is required for AI functionality}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-1500}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.7}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY:-}
      - WHISPER_MODEL=${WHISPER_MODEL:-medium}
      
      # CORS & Security - PRODUCTION DOMAINS
      - CORS_ALLOWED_ORIGINS=["https://${PRODUCTION_DOMAIN:-aiteddybear.com}","https://www.${PRODUCTION_DOMAIN:-aiteddybear.com}","https://app.${PRODUCTION_DOMAIN:-aiteddybear.com}"]
      - ALLOWED_HOSTS=["${PRODUCTION_DOMAIN:-aiteddybear.com}","www.${PRODUCTION_DOMAIN:-aiteddybear.com}","app.${PRODUCTION_DOMAIN:-aiteddybear.com}","api.${PRODUCTION_DOMAIN:-aiteddybear.com}"]
      
      # Child Safety & COPPA Compliance
      - COPPA_COMPLIANCE_MODE=true
      - CONTENT_FILTER_STRICT=true
      - PARENT_NOTIFICATION_EMAIL=${PARENT_NOTIFICATION_EMAIL:?PARENT_NOTIFICATION_EMAIL is required for COPPA compliance}
      - CHILD_SAFETY_STRICT=true
      - SAFETY_MONITORING_ENABLED=true
      
      # Rate Limiting - Production Values
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-30}
      - RATE_LIMIT_BURST=${RATE_LIMIT_BURST:-5}
      - RATE_LIMIT_GLOBAL_REQUESTS_PER_SECOND=${RATE_LIMIT_GLOBAL_REQUESTS_PER_SECOND:-100}
      
      # Security Thresholds
      - SECURITY_BRUTE_FORCE_ATTEMPTS=${SECURITY_BRUTE_FORCE_ATTEMPTS:-5}
      - SECURITY_BRUTE_FORCE_WINDOW=${SECURITY_BRUTE_FORCE_WINDOW:-3600}
      - SECURITY_ACCESS_MAX_PER_HOUR=${SECURITY_ACCESS_MAX_PER_HOUR:-20}
      - SECURITY_ACCESS_MAX_PER_DAY=${SECURITY_ACCESS_MAX_PER_DAY:-100}
      - SECURITY_ACCESS_MAX_PER_MINUTE=${SECURITY_ACCESS_MAX_PER_MINUTE:-5}
      
      # Content & Safety Scoring
      - SAFETY_SCORE_THRESHOLD=${SAFETY_SCORE_THRESHOLD:-0.9}
      - CONTENT_COMPLEXITY_AGE_THRESHOLD_SIMPLE=${CONTENT_COMPLEXITY_AGE_THRESHOLD_SIMPLE:-5}
      - CONTENT_COMPLEXITY_AGE_THRESHOLD_COMPLEX=${CONTENT_COMPLEXITY_AGE_THRESHOLD_COMPLEX:-8}
      
      # JWT Configuration
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # API Configuration
      - API_BASE_URL=https://api.${PRODUCTION_DOMAIN:-aiteddybear.com}
      - API_TITLE=AI Teddy Bear Production API
      - API_VERSION=1.0.0
      - SUPPORT_EMAIL=${SUPPORT_EMAIL:-support@aiteddybear.com}
      - DOCS_URL=""  # Disable docs in production
      - REDOC_URL=""  # Disable redoc in production
      
      # Session Configuration
      - SESSION_EXPIRE_HOURS=${SESSION_EXPIRE_HOURS:-8}
      - SESSION_SECURE=true
      - SESSION_HTTPONLY=true
      - SESSION_SAMESITE=strict
      
      # Feature Flags
      - ENABLE_DATABASE=true
      - ENABLE_REDIS=true
      - ENABLE_AI_SERVICES=true
      - USE_MOCK_SERVICES=false
      
      # Data Retention & Privacy (COPPA Compliance)
      - DATA_RETENTION_DAYS=${DATA_RETENTION_DAYS:-90}
      - AUTO_DELETE_ENABLED=true
      - DATA_EXPORT_ENABLED=true
      - CHILD_DATA_ENCRYPTION_ENABLED=true
      
      # Monitoring & Observability
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - SENTRY_DSN=${SENTRY_DSN:?SENTRY_DSN is required for production monitoring}
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - OTEL_SERVICE_NAME=ai-teddy-bear
      - OTEL_SERVICE_VERSION=${APP_VERSION:-1.0.0}
      
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-4}
      - WORKER_CLASS=uvicorn.workers.UvicornWorker
      - MAX_REQUESTS=${MAX_REQUESTS:-1000}
      - MAX_REQUESTS_JITTER=${MAX_REQUESTS_JITTER:-100}
      
      # SSL/TLS Configuration
      - SSL_ENABLED=true
      - FORCE_HTTPS=true
      - HSTS_MAX_AGE=${HSTS_MAX_AGE:-31536000}
      
    volumes:
      - app_logs_prod:/app/logs
      - app_data_prod:/app/data
      - app_secure_storage_prod:/app/secure_storage
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/comprehensive"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - teddy-internal
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'

  # NGINX Reverse Proxy with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-teddy-nginx-prod
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - nginx_ssl_certs:/etc/nginx/ssl
      - nginx_logs_prod:/var/log/nginx
      - certbot_webroot:/var/www/certbot:ro
    environment:
      - DOMAIN=${PRODUCTION_DOMAIN:-aiteddybear.com}
      - APP_UPSTREAM=app:8000
    restart: unless-stopped
    networks:
      - teddy-internal
      - teddy-public
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Certbot for SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: ai-teddy-certbot-prod
    depends_on:
      - nginx
    volumes:
      - nginx_ssl_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      - certbot_logs:/var/log/letsencrypt
    environment:
      - DOMAIN=${PRODUCTION_DOMAIN:-aiteddybear.com}
      - EMAIL=${SSL_EMAIL:?SSL_EMAIL is required for Let's Encrypt}
    command: >
      sh -c "
      certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email $${EMAIL} --agree-tos --no-eff-email 
      -d $${DOMAIN} -d www.$${DOMAIN} -d api.$${DOMAIN} -d app.$${DOMAIN} ||
      echo 'Certificate already exists or failed to obtain'
      "
    networks:
      - teddy-internal

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ai-teddy-prometheus-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data_prod:/prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Only accessible from localhost
    restart: unless-stopped
    networks:
      - teddy-internal
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ai-teddy-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD is required}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SERVER_ROOT_URL=https://monitoring.${PRODUCTION_DOMAIN:-aiteddybear.com}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER:-}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - GF_SMTP_FROM_ADDRESS=${SUPPORT_EMAIL:-support@aiteddybear.com}
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"  # Only accessible from localhost
    restart: unless-stopped
    networks:
      - teddy-internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: ai-teddy-db-backup-prod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - S3_BUCKET=${S3_BACKUP_BUCKET:-}
    volumes:
      - ./backup/backup.sh:/backup.sh:ro
      - ./backup/restore.sh:/restore.sh:ro
      - db_backups_prod:/backups
    command: >
      sh -c "
      echo '$${BACKUP_SCHEDULE} /backup.sh' | crontab - &&
      crond -f -l 8
      "
    restart: unless-stopped
    networks:
      - teddy-internal

# Production Volumes with Local Bind Mounts for Persistence
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres-prod
  
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis-prod
  
  app_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/app-prod
  
  app_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/app-prod
  
  app_secure_storage_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SECURE_STORAGE_PATH:-./secure_storage}/prod
  
  nginx_ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-./ssl}/certs
  
  nginx_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/nginx-prod
  
  certbot_webroot:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-./ssl}/webroot
  
  certbot_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/certbot
  
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus-prod
  
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana-prod
  
  db_backups_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}/database

# Networks
networks:
  teddy-internal:
    driver: bridge
    internal: true  # Internal network for service communication
    ipam:
      config:
        - subnet: 172.21.0.0/16
  
  teddy-public:
    driver: bridge  # Public network for nginx
    ipam:
      config:
        - subnet: 172.22.0.0/16