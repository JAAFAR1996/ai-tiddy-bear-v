name: ai-teddy-production
services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-teddy-postgres-prod
    env_file:
    - ../.env.production
    environment:
      POSTGRES_DB: ${DB_NAME:?DB_NAME is required}
      POSTGRES_USER: ${DB_USER:?DB_USER is required}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?DB_PASSWORD is required}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
    - postgres_data_prod:/var/lib/postgresql/data
    - ../sql:/docker-entrypoint-initdb.d/:ro
    - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
    - teddy-internal
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    logging:
      driver: json-file
      options:
        max-size: 50m
        max-file: '3'
  redis:
    image: redis:7-alpine
    container_name: ai-teddy-redis-prod
    env_file:
    - ../.env.production
    command:
    - sh
    - -c
    - redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    volumes:
    - redis_data_prod:/data
    - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test:
      - CMD
      - redis-cli
      - -a
      - ${REDIS_PASSWORD}
      - ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
    - teddy-internal
    logging:
      driver: json-file
      options:
        max-size: 50m
        max-file: '3'
  app:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    image: ai-teddy-app:${APP_VERSION:-latest}
    container_name: ai-teddy-app-prod
    env_file:
    - ../.env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
    - app_logs_prod:/app/logs
    - app_data_prod:/app/data
    - app_secure_storage_prod:/app/secure_storage
    - ../keys:/app/keys:ro
    - ../.env.production:/app/.env:ro
    environment:
      JWT_ALGORITHM: RS256
      INSTANCE_ID: app-a
      AFFINITY_COOKIE_NAME: teddy_affinity
      AFFINITY_COOKIE_TTL_SECONDS: '3600'
      ALLOW_AI_FAILURE_FALLBACK: 'false'
      ALLOW_WS_MOCK: 'false'
      OPENAI_API_KEY_FILE: /run/secrets/ai_teddy_bear_openai_api_key
      OPENAI_STT_API_KEY_FILE: /run/secrets/ai_teddy_bear_openai_stt_api_key
    expose:
    - '8000'
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
    - teddy-internal
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '5'
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    secrets:
    - ai_teddy_bear_openai_api_key
    - ai_teddy_bear_openai_stt_api_key
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-teddy-nginx-prod
    env_file:
    - ../.env.production
    depends_on:
      app:
        condition: service_healthy
      app_replica:
        condition: service_healthy
    ports:
    - 80:80
    - 443:443
    volumes:
    - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    - ./nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
    - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
    - ./nginx/entrypoint:/docker-entrypoint.d:ro
    - nginx_ssl_certs:/etc/nginx/ssl
    - nginx_logs_prod:/var/log/nginx
    - certbot_webroot:/var/www/certbot:ro
    environment:
    - DOMAIN=${PRODUCTION_DOMAIN:-aiteddybear.com}
    - APP_UPSTREAM=app:8000
    restart: unless-stopped
    networks:
    - teddy-internal
    - teddy-public
    healthcheck:
      test:
      - CMD
      - nginx
      - -t
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '5'
  certbot:
    profiles:
    - public-tls
    image: certbot/certbot:latest
    container_name: ai-teddy-certbot-prod
    env_file:
    - ../.env.production
    depends_on:
    - nginx
    volumes:
    - nginx_ssl_certs:/etc/letsencrypt
    - certbot_webroot:/var/www/certbot
    - certbot_logs:/var/log/letsencrypt
    environment:
    - DOMAIN=${PRODUCTION_DOMAIN:-aiteddybear.com}
    - EMAIL=${SSL_EMAIL:?SSL_EMAIL is required for Let's Encrypt}
    command: 'sh -c " certbot certonly --webroot --webroot-path=/var/www/certbot  --email
      $${EMAIL} --agree-tos --no-eff-email  -d $${DOMAIN} -d www.$${DOMAIN} -d api.$${DOMAIN}
      -d app.$${DOMAIN} || echo ''Certificate already exists or failed to obtain''
      "

      '
    networks:
    - teddy-internal
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ai-teddy-prometheus-prod
    env_file:
    - ../.env.production
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=30d
    - --web.enable-lifecycle
    - --web.enable-admin-api
    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
    - prometheus_data_prod:/prometheus
    ports:
    - 127.0.0.1:9090:9090
    restart: unless-stopped
    networks:
    - teddy-internal
    healthcheck:
      test:
      - CMD
      - wget
      - --quiet
      - --tries=1
      - --spider
      - http://localhost:9090/-/healthy
      interval: 30s
      timeout: 10s
      retries: 3
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ai-teddy-grafana-prod
    env_file:
    - ../.env.production
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?GRAFANA_ADMIN_PASSWORD
      is required}
    - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
    - GF_SERVER_ROOT_URL=https://monitoring.${PRODUCTION_DOMAIN:-aiteddybear.com}
    - GF_SECURITY_COOKIE_SECURE=true
    - GF_SECURITY_COOKIE_SAMESITE=strict
    - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_SMTP_ENABLED=true
    - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
    - GF_SMTP_USER=${SMTP_USER:-}
    - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-}
    - GF_SMTP_FROM_ADDRESS=${SUPPORT_EMAIL:-support@aiteddybear.com}
    volumes:
    - grafana_data_prod:/var/lib/grafana
    - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
    - 127.0.0.1:3000:3000
    restart: unless-stopped
    networks:
    - teddy-internal
    healthcheck:
      test:
      - CMD-SHELL
      - curl -f http://localhost:3000/api/health
      interval: 30s
      timeout: 10s
      retries: 3
  db-backup:
    image: postgres:15-alpine
    container_name: ai-teddy-db-backup-prod
    env_file:
    - ../.env.production
    depends_on:
      postgres:
        condition: service_healthy
    environment:
    - PGHOST=postgres
    - PGPORT=5432
    - PGUSER=${DB_USER}
    - PGPASSWORD=${DB_PASSWORD}
    - PGDATABASE=${DB_NAME}
    - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    - S3_BUCKET=${S3_BACKUP_BUCKET:-}
    volumes:
    - ./backup/backup.sh:/backup.sh:ro
    - ./backup/restore.sh:/restore.sh:ro
    - db_backups_prod:/backups
    command: 'sh -c " echo ''$${BACKUP_SCHEDULE} /backup.sh'' | crontab - && crond
      -f -l 8 "

      '
    restart: unless-stopped
    networks:
    - teddy-internal
  app_replica:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    image: ai-teddy-app:${APP_VERSION:-latest}
    container_name: ai-teddy-app-replica
    env_file:
    - ../.env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
    - app_logs_prod:/app/logs
    - app_data_prod:/app/data
    - app_secure_storage_prod:/app/secure_storage
    - ../keys:/app/keys:ro
    - ../.env.production:/app/.env:ro
    environment:
      JWT_ALGORITHM: RS256
      INSTANCE_ID: app-b
      AFFINITY_COOKIE_NAME: teddy_affinity
      AFFINITY_COOKIE_TTL_SECONDS: '3600'
      ALLOW_AI_FAILURE_FALLBACK: 'false'
      ALLOW_WS_MOCK: 'false'
      OPENAI_API_KEY_FILE: /run/secrets/ai_teddy_bear_openai_api_key
      OPENAI_STT_API_KEY_FILE: /run/secrets/ai_teddy_bear_openai_stt_api_key
    expose:
    - '8000'
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
    - teddy-internal
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '5'
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    secrets:
    - ai_teddy_bear_openai_api_key
    - ai_teddy_bear_openai_stt_api_key
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres-prod
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis-prod
  app_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/app-prod
  app_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/app-prod
  app_secure_storage_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SECURE_STORAGE_PATH:-./secure_storage}/prod
  nginx_ssl_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-./ssl}/certs
  nginx_logs_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/nginx-prod
  certbot_webroot:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SSL_CERTS_PATH:-./ssl}/webroot
  certbot_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}/certbot
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus-prod
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana-prod
  db_backups_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}/database
networks:
  teddy-internal:
    driver: bridge
    internal: true
    ipam:
      config:
      - subnet: 172.21.0.0/16
  teddy-public:
    driver: bridge
    ipam:
      config:
      - subnet: 172.22.0.0/16
secrets:
  ai_teddy_bear_openai_api_key:
    file: ../vault/secrets/openai_api_key
  ai_teddy_bear_openai_stt_api_key:
    file: ../vault/secrets/openai_stt_api_key
