version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-teddy-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME:-ai_teddy_bear_dev}
      POSTGRES_USER: ${DB_USER:-ai_teddy_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d/
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ai_teddy_user} -d ${DB_NAME:-ai_teddy_bear_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - teddy-dev-network

  redis:
    image: redis:7-alpine
    container_name: ai-teddy-redis-dev
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis_dev_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - teddy-dev-network

  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ai-teddy-app-dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Environment Configuration
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      
      # Security Keys - Development Only
      - SECRET_KEY=dev-secret-key-change-in-production-32-chars-long-minimum
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production-32-chars-long
      - COPPA_ENCRYPTION_KEY=dev-coppa-encryption-key-change-in-production-32
      
      # Database Configuration
      - DATABASE_URL=postgresql://ai_teddy_user:devpassword@postgres:5432/ai_teddy_bear_dev
      - DATABASE_POOL_SIZE=5
      - DATABASE_MAX_OVERFLOW=10
      - DATABASE_POOL_TIMEOUT=30
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_POOL_SIZE=5
      - REDIS_TIMEOUT=5
      
      # AI Services Configuration (Optional in dev)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=gpt-3.5-turbo
      - OPENAI_MAX_TOKENS=500
      - OPENAI_TEMPERATURE=0.7
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY:-}
      
      # CORS & Security - Development
      - CORS_ALLOWED_ORIGINS=["http://localhost:3000","http://127.0.0.1:3000","http://localhost:8080"]
      - ALLOWED_HOSTS=["localhost","127.0.0.1","0.0.0.0"]
      
      # Child Safety & COPPA
      - COPPA_COMPLIANCE_MODE=true
      - CONTENT_FILTER_STRICT=false
      - PARENT_NOTIFICATION_EMAIL=dev@example.com
      
      # Rate Limiting - More relaxed for dev
      - RATE_LIMIT_REQUESTS_PER_MINUTE=300
      - RATE_LIMIT_BURST=50
      
      # Content & Safety - More relaxed for dev
      - SAFETY_SCORE_THRESHOLD=0.6
      
      # JWT Configuration
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440  # 24 hours for dev
      - REFRESH_TOKEN_EXPIRE_DAYS=30
      
      # API Configuration
      - API_BASE_URL=http://localhost:8000
      - API_TITLE=AI Teddy Bear API (Development)
      - API_VERSION=1.0.0-dev
      - SUPPORT_EMAIL=dev@aiteddybear.com
      - DOCS_URL=/docs
      - REDOC_URL=/redoc
      
      # Session Configuration
      - SESSION_EXPIRE_HOURS=72  # 3 days for dev
      - SESSION_SECURE=false
      - SESSION_HTTPONLY=true
      - SESSION_SAMESITE=lax
      
      # Feature Flags
      - ENABLE_DATABASE=true
      - ENABLE_REDIS=true
      - ENABLE_AI_SERVICES=true
      - USE_MOCK_SERVICES=false
      
      # Data Retention & Privacy
      - DATA_RETENTION_DAYS=30
      - AUTO_DELETE_ENABLED=false
      - DATA_EXPORT_ENABLED=true
      
      # Optional Services
      - KAFKA_ENABLED=false
      - VAULT_ENABLED=false
      
      # Monitoring & Observability
      - PROMETHEUS_ENABLED=false
      - ENABLE_METRICS=false
      - ENABLE_TRACING=false
      
      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - .:/app  # Mount source code for hot reload
      - ./logs:/app/logs
    # Enable hot reload for development
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - teddy-dev-network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  teddy-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16