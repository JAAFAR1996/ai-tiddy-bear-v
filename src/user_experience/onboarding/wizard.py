"""
๐งโโ๏ธ AI TEDDY BEAR - ูุนุงูุฌ ุงูุฅุนุฏุงุฏ ุงูุฃููู
========================================
ูุธุงู ุดุงูู ูุฅุฑุดุงุฏ ุงููุณุชุฎุฏููู ุงูุฌุฏุฏ ุฎุทูุฉ ุจุฎุทูุฉ
"""

from dataclasses import dataclass
from typing import Dict, List, Optional, Any
from enum import Enum
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
from src.shared.audio_types import VoiceGender, VoiceEmotion


class WizardStepType(Enum):
    """ููุน ุฎุทูุฉ ุงููุนุงูุฌ"""

    WELCOME = "welcome"
    INFO_COLLECTION = "info_collection"
    DEVICE_SETUP = "device_setup"
    TESTING = "testing"
    COMPLETION = "completion"


class MediaType(Enum):
    """ููุน ุงููุณุงุฆุท ุงููุณุงุนุฏุฉ"""

    IMAGE = "image"
    VIDEO = "video"
    GIF = "gif"
    AUDIO = "audio"
    PDF = "pdf"


@dataclass
class WizardStep:
    """ุฎุทูุฉ ูู ูุนุงูุฌ ุงูุฅุนุฏุงุฏ"""

    id: str
    type: WizardStepType
    title: str
    subtitle: str
    description: str
    instructions: List[str]
    media_files: List[Dict[str, str]]  # [{"type": "image", "url": "...", "alt": "..."}]
    input_fields: List[Dict[str, Any]]  # ูุทููุจ ุฅุฏุฎุงู ูู ุงููุณุชุฎุฏู
    validation_rules: Dict[str, Any]
    success_message: str
    error_messages: Dict[str, str]
    help_text: str
    estimated_time: int  # ุจุงูุซูุงูู
    can_skip: bool
    next_step: Optional[str]
    previous_step: Optional[str]


class OnboardingWizard:
    """ูุนุงูุฌ ุงูุฅุนุฏุงุฏ ุงูุฃููู"""

    def __init__(self):
        self.steps = self._create_wizard_steps()
        self.current_sessions: Dict[str, Dict[str, Any]] = {}

    def _create_wizard_steps(self) -> Dict[str, WizardStep]:
        """ุฅูุดุงุก ุฎุทูุงุช ุงููุนุงูุฌ"""
        return {
            # ุฎุทูุฉ 1: ุงูุชุฑุญูุจ
            "welcome": WizardStep(
                id="welcome",
                type=WizardStepType.WELCOME,
                title="๐ ูุฑุญุจุงู ุจู ูู AI Teddy Bear!",
                subtitle="ุฏุนูุง ูุณุงุนุฏู ูู ุฅุนุฏุงุฏ ุชุฌุฑุจุฉ ุขููุฉ ููููุฒุฉ ูุทููู",
                description="ุณูููู ูุนุงู ุจุฅุนุฏุงุฏ ุญุณุงุจู ูุฑุจุท ุฌูุงุฒ AI Teddy Bear ูู ุฎุทูุงุช ุจุณูุทุฉ.",
                instructions=[
                    "ูุฐุง ุงููุนุงูุฌ ุณูุณุชุบุฑู ุญูุงูู 10-15 ุฏูููุฉ",
                    "ุชุฃูุฏ ูู ูุฌูุฏ ุฌูุงุฒ AI Teddy Bear ุจุฌุงูุจู",
                    "ุชุฃูุฏ ูู ุงุชุตุงูู ุจุดุจูุฉ ุงููุงู ูุงู",
                    "ุงุญุชูุธ ุจููุฏ QR ุงูููุฌูุฏ ุนูู ุงูุฌูุงุฒ",
                ],
                media_files=[
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/welcome_hero.png",
                        "alt": "AI Teddy Bear - ุงูุดุงุดุฉ ุงูุชุฑุญูุจูุฉ",
                    }
                ],
                input_fields=[],
                validation_rules={},
                success_message="ููุชุงุฒ! ููุจุฏุฃ ุฑุญูุฉ ุงูุฅุนุฏุงุฏ",
                error_messages={},
                help_text="ููููู ุงูุฎุฑูุฌ ูู ุงููุนุงูุฌ ูู ุฃู ููุช ูุงูุนูุฏุฉ ูุงุญูุงู",
                estimated_time=30,
                can_skip=False,
                next_step="parent_info",
                previous_step=None,
            ),
            # ุฎุทูุฉ 2: ูุนูููุงุช ููู ุงูุฃูุฑ
            "parent_info": WizardStep(
                id="parent_info",
                type=WizardStepType.INFO_COLLECTION,
                title="๐จโ๐ฉโ๐งโ๐ฆ ูุนูููุงุช ููู ุงูุฃูุฑ",
                subtitle="ูุญุชุงุฌ ูุจุนุถ ุงููุนูููุงุช ุงูุฃุณุงุณูุฉ ูุฅูุดุงุก ุญุณุงุจ ุขูู",
                description="ูุฐู ุงููุนูููุงุช ุณุชุณุชุฎุฏู ูุญูุงูุฉ ุญุณุงุจ ุทููู ูุถูุงู ุงูุงุณุชุฎุฏุงู ุงูุขูู.",
                instructions=[
                    "ุฃุฏุฎู ุงุณูู ุงููุงูู ููุง ูู ูู ุงููููุฉ",
                    "ุงุณุชุฎุฏู ุจุฑูุฏ ุฅููุชุฑููู ุตุญูุญ - ุณุชุญุชุงุฌู ููุชุญูู",
                    "ุงุฎุชุฑ ูููุฉ ูุฑูุฑ ูููุฉ (8 ุฃุญุฑู ุนูู ุงูุฃูู)",
                    "ุฃุฏุฎู ุฑูู ูุงุชู ููุทูุงุฑุฆ (ุงุฎุชูุงุฑู)",
                ],
                media_files=[
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/parent_info_form.png",
                        "alt": "ูููุฐุฌ ูุนูููุงุช ููู ุงูุฃูุฑ",
                    }
                ],
                input_fields=[
                    {
                        "id": "full_name",
                        "type": "text",
                        "label": "ุงูุงุณู ุงููุงูู",
                        "placeholder": "ุฃุฏุฎู ุงุณูู ุงููุงูู",
                        "required": True,
                        "max_length": 100,
                    },
                    {
                        "id": "email",
                        "type": "email",
                        "label": "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",
                        "placeholder": "example@email.com",
                        "required": True,
                    },
                    {
                        "id": "password",
                        "type": "password",
                        "label": "ูููุฉ ุงููุฑูุฑ",
                        "placeholder": "ูููุฉ ูุฑูุฑ ูููุฉ",
                        "required": True,
                        "min_length": 8,
                    },
                    {
                        "id": "password_confirm",
                        "type": "password",
                        "label": "ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ",
                        "placeholder": "ุฃุนุฏ ูุชุงุจุฉ ูููุฉ ุงููุฑูุฑ",
                        "required": True,
                    },
                    {
                        "id": "phone",
                        "type": "tel",
                        "label": "ุฑูู ุงููุงุชู (ุงุฎุชูุงุฑู)",
                        "placeholder": "+966 50 123 4567",
                        "required": False,
                    },
                ],
                validation_rules={
                    "email": {"format": "email"},
                    "password": {"min_length": 8, "require_special": True},
                    "password_confirm": {"must_match": "password"},
                    "phone": {"format": "international"},
                },
                success_message="ุชู ุญูุธ ูุนูููุงุชู ุจูุฌุงุญ! ุณูุฑุณู ุฑุงุจุท ุงูุชุญูู ูุจุฑูุฏู ุงูุฅููุชุฑููู",
                error_messages={
                    "email_exists": "ูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุณุชุฎุฏู ุจุงููุนู",
                    "weak_password": "ูููุฉ ุงููุฑูุฑ ุถุนููุฉุ ุงุณุชุฎุฏู ุฃุญุฑู ูุฃุฑูุงู ูุฑููุฒ",
                    "password_mismatch": "ูููุชุง ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุชูู",
                    "invalid_phone": "ุฑูู ุงููุงุชู ุบูุฑ ุตุญูุญ",
                },
                help_text="ูุนูููุงุชู ูุญููุฉ ูููุงู ูููุงููู COPPA ูGDPR",
                estimated_time=300,
                can_skip=False,
                next_step="child_profile",
                previous_step="welcome",
            ),
            # ุฎุทูุฉ 3: ููู ุงูุทูู
            "child_profile": WizardStep(
                id="child_profile",
                type=WizardStepType.INFO_COLLECTION,
                title="๐งธ ููู ุงูุทูู ุงูุดุฎุตู",
                subtitle="ุฏุนูุง ูุชุนุฑู ุนูู ุทููู ูููุฏู ุชุฌุฑุจุฉ ูุฎุตุตุฉ ูุขููุฉ",
                description="ูุฐู ุงููุนูููุงุช ุณุชุณุงุนุฏูุง ูู ุชุฎุตูุต ุงููุญุงุฏุซุงุช ูุงููุญุชูู ูููุงุณุจ ุนูุฑ ุทููู.",
                instructions=[
                    "ุฃุฏุฎู ุงุณู ุทููู (ูููู ุงุณุชุฎุฏุงู ุงุณู ูุณุชุนุงุฑ)",
                    "ุญุฏุฏ ุงูุนูุฑ ุจุฏูุฉ - ููู ุฌุฏุงู ูููุญุชูู ุงูุขูู",
                    "ุงุฎุชุฑ ุงูููุงูุงุช ูุงูุงูุชูุงูุงุช",
                    "ุญุฏุฏ ูุณุชูู ุงูุชูุงุนู ุงูููุงุณุจ",
                ],
                media_files=[
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/child_profile.png",
                        "alt": "ุฅูุดุงุก ููู ุงูุทูู",
                    },
                    {
                        "type": "video",
                        "url": "/static/videos/child_safety_explanation.mp4",
                        "alt": "ุดุฑุญ ููุฒุงุช ุงูุฃูุงู ููุฃุทูุงู",
                    },
                ],
                input_fields=[
                    {
                        "id": "child_name",
                        "type": "text",
                        "label": "ุงุณู ุงูุทูู",
                        "placeholder": "ูุซุงู: ุฃุญูุฏ ุฃู ุณุงุฑุฉ",
                        "required": True,
                        "max_length": 50,
                    },
                    {
                        "id": "child_age",
                        "type": "number",
                        "label": "ุนูุฑ ุงูุทูู",
                        "placeholder": "ูู 3 ุฅูู 13 ุณูุฉ",
                        "required": True,
                        "min": 3,
                        "max": 13,
                    },
                    {
                        "id": "gender",
                        "type": "select",
                        "label": "ุงูุฌูุณ (ุงุฎุชูุงุฑู)",
                        "options": [
                            {"value": "", "label": "ูุง ุฃุฑุบุจ ูู ุงูุชุญุฏูุฏ"},
                            {"value": VoiceGender.MALE.value, "label": "ุฐูุฑ"},
                            {"value": VoiceGender.FEMALE.value, "label": "ุฃูุซู"},
                        ],
                        "required": False,
                    },
                    {
                        "id": "interests",
                        "type": "checkbox",
                        "label": "ุงูุงูุชูุงูุงุช ูุงูููุงูุงุช",
                        "options": [
                            {"value": "stories", "label": "ุงููุตุต ูุงูุญูุงูุงุช"},
                            {"value": "music", "label": "ุงูููุณููู ูุงูุฃุบุงูู"},
                            {"value": "games", "label": "ุงูุฃูุนุงุจ ูุงูุฃูุบุงุฒ"},
                            {"value": "science", "label": "ุงูุนููู ูุงูุงูุชุดุงูุงุช"},
                            {"value": "art", "label": "ุงููู ูุงูุฑุณู"},
                            {"value": "sports", "label": "ุงูุฑูุงุถุฉ ูุงูุญุฑูุฉ"},
                        ],
                        "required": False,
                    },
                    {
                        "id": "interaction_level",
                        "type": "radio",
                        "label": "ูุณุชูู ุงูุชูุงุนู",
                        "options": [
                            {"value": VoiceEmotion.GENTLE.value, "label": "ูุงุฏุฆ ููุทูู"},
                            {"value": "moderate", "label": "ูุชูุณุท ููุฑุญ"},
                            {"value": "energetic", "label": "ูุดูุท ูููุนู ุจุงูุญูููุฉ"},
                        ],
                        "required": True,
                        "default": "moderate",
                    },
                ],
                validation_rules={
                    "child_age": {"min": 3, "max": 13},
                    "child_name": {"min_length": 2, "max_length": 50},
                },
                success_message="ุฑุงุฆุน! ุชู ุญูุธ ููู ุทููู ุจูุฌุงุญ",
                error_messages={
                    "age_out_of_range": "ุนุฐุฑุงูุ AI Teddy Bear ูุฎุตุต ููุฃุทูุงู ูู 3 ุฅูู 13 ุณูุฉ",
                    "name_too_short": "ุงุณู ุงูุทูู ูุตูุฑ ุฌุฏุงู",
                    "name_too_long": "ุงุณู ุงูุทูู ุทููู ุฌุฏุงู",
                },
                help_text="ููููู ุชุนุฏูู ูุฐู ุงููุนูููุงุช ูู ุฃู ููุช ูู ุงูุฅุนุฏุงุฏุงุช",
                estimated_time=240,
                can_skip=False,
                next_step="device_preparation",
                previous_step="parent_info",
            ),
            # ุฎุทูุฉ 4: ุชุญุถูุฑ ุงูุฌูุงุฒ
            "device_preparation": WizardStep(
                id="device_preparation",
                type=WizardStepType.DEVICE_SETUP,
                title="๐ฑ ุชุญุถูุฑ ุฌูุงุฒ AI Teddy Bear",
                subtitle="ุงูุขู ุฏุนูุง ูุญุถุฑ ุงูุฌูุงุฒ ููุงุณุชุฎุฏุงู",
                description="ุณูููู ุจุชูุตูู ุงูุฌูุงุฒ ุจุงูุดุจูุฉ ูุฑุจุทู ุจุญุณุงุจ ุทููู.",
                instructions=[
                    "ุชุฃูุฏ ูู ุฃู ุงูุฌูุงุฒ ูุชุตู ุจุงูููุฑุจุงุก ููุถุงุก",
                    "ุชุฃูุฏ ูู ุงุชุตุงูู ุจุดุจูุฉ ุงููุงู ูุงู",
                    "ุงุญุถุฑ ููุฏ QR ุงูููุฌูุฏ ุนูู ุธูุฑ ุงูุฌูุงุฒ ุฃู ูู ุงูุนูุจุฉ",
                    "ุชุฃูุฏ ูู ุฃู ุฌูุงุฒู ูุชุตู ุจููุณ ุดุจูุฉ ุงููุงู ูุงู",
                ],
                media_files=[
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/device_preparation.png",
                        "alt": "ุชุญุถูุฑ ุงูุฌูุงุฒ ููุฅุนุฏุงุฏ",
                    },
                    {
                        "type": "gif",
                        "url": "/static/images/onboarding/find_qr_code.gif",
                        "alt": "ููููุฉ ุงูุนุซูุฑ ุนูู ููุฏ QR",
                    },
                    {
                        "type": "video",
                        "url": "/static/videos/device_setup_guide.mp4",
                        "alt": "ุฏููู ุฅุนุฏุงุฏ ุงูุฌูุงุฒ ุจุงูููุฏูู",
                    },
                ],
                input_fields=[
                    {
                        "id": "device_ready",
                        "type": "checkbox",
                        "label": "ุชุฃููุฏุงุช ุงูุฌุงูุฒูุฉ",
                        "options": [
                            {
                                "value": "powered",
                                "label": "ุงูุฌูุงุฒ ูุชุตู ุจุงูููุฑุจุงุก ููุถุงุก",
                            },
                            {
                                "value": "wifi_connected",
                                "label": "ุฌูุงุฒู ูุชุตู ุจุดุจูุฉ ุงููุงู ูุงู",
                            },
                            {"value": "qr_ready", "label": "ููุฏ QR ุฌุงูุฒ ููุฑุฆู ุจูุถูุญ"},
                            {
                                "value": "location_ready",
                                "label": "ุงูุฌูุงุฒ ูู ููุงู ููุงุณุจ ููุทูู",
                            },
                        ],
                        "required": True,
                        "min_selections": 4,
                    }
                ],
                validation_rules={"device_ready": {"min_selections": 4}},
                success_message="ููุชุงุฒ! ุงูุฌูุงุฒ ุฌุงูุฒ ููุฑุจุท",
                error_messages={
                    "incomplete_preparation": "ูุฑุฌู ุงูุชุฃูุฏ ูู ุฌููุน ุฎุทูุงุช ุงูุชุญุถูุฑ"
                },
                help_text="ุฅุฐุง ูุงุฌูุช ูุดููุฉุ ุฑุงุฌุน ุฏููู ุงูุฅุนุฏุงุฏ ุงูุณุฑูุน ูู ุงูุนูุจุฉ",
                estimated_time=180,
                can_skip=False,
                next_step="wifi_setup",
                previous_step="child_profile",
            ),
            # ุฎุทูุฉ 5: ุฅุนุฏุงุฏ ุงููุงู ูุงู
            "wifi_setup": WizardStep(
                id="wifi_setup",
                type=WizardStepType.DEVICE_SETUP,
                title="๐ถ ุฑุจุท ุงูุฌูุงุฒ ุจุงููุงู ูุงู",
                subtitle="ุณูุฑุจุท ุฌูุงุฒ AI Teddy Bear ุจุดุจูุฉ ุงููุงู ูุงู",
                description="ูุฐู ุงูุฎุทูุฉ ุถุฑูุฑูุฉ ูุชูููู ุงูุฌูุงุฒ ูู ุงูุชูุงุตู ูุน ุฎุฏูุงุช AI ุงูุขููุฉ.",
                instructions=[
                    "ุงุถุบุท ุนูู ุฒุฑ ุงูุฅุนุฏุงุฏ ูู ุงูุฌูุงุฒ ููุฏุฉ 3 ุซูุงูู",
                    "ุงูุชุธุฑ ุญุชู ูุถูุก ุงูุถูุก ุงูุฃุฒุฑู",
                    "ุงูุณุญ ููุฏ QR ุงูููุฌูุฏ ุนูู ุงูุฌูุงุฒ",
                    "ุงุชุจุน ุงูุชุนูููุงุช ุงูุชู ุณุชุธูุฑ ุนูู ุงูุดุงุดุฉ",
                ],
                media_files=[
                    {
                        "type": "gif",
                        "url": "/static/images/onboarding/wifi_setup.gif",
                        "alt": "ุฎุทูุงุช ุฑุจุท ุงููุงู ูุงู",
                    },
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/qr_scanner.png",
                        "alt": "ูุงุณุญ ููุฏ QR",
                    },
                ],
                input_fields=[
                    {
                        "id": "qr_code",
                        "type": "qr_scanner",
                        "label": "ุงูุณุญ ููุฏ QR",
                        "placeholder": "ุงุถุบุท ููุชุญ ุงููุงููุฑุง ูุงูุณุญ ุงูููุฏ",
                        "required": True,
                    },
                    {
                        "id": "manual_code",
                        "type": "text",
                        "label": "ุฃู ุฃุฏุฎู ุงูููุฏ ูุฏููุงู",
                        "placeholder": "TB-XXXX-XXXX-XXXX",
                        "required": False,
                        "pattern": "^TB-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$",
                    },
                ],
                validation_rules={
                    "qr_code": {"format": "teddy_bear_device"},
                    "manual_code": {
                        "pattern": "^TB-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$"
                    },
                },
                success_message="ุชู ุฑุจุท ุงูุฌูุงุฒ ุจูุฌุงุญ! ุงูุขู ููููู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช",
                error_messages={
                    "invalid_qr": "ููุฏ QR ุบูุฑ ุตุญูุญ ุฃู ุชุงูู",
                    "device_already_paired": "ูุฐุง ุงูุฌูุงุฒ ูุฑุจูุท ุจุญุณุงุจ ุขุฎุฑ",
                    "connection_failed": "ูุดู ูู ุงูุงุชุตุงูุ ุชุญูู ูู ุดุจูุฉ ุงููุงู ูุงู",
                    "invalid_manual_code": "ุงูููุฏ ุงููุฏุฎู ุบูุฑ ุตุญูุญ",
                },
                help_text="ุฅุฐุง ูู ุชุชููู ูู ูุณุญ ุงูููุฏุ ุฌุฑุจ ุชุญุณูู ุงูุฅุถุงุกุฉ ุฃู ุงุณุชุฎุฏู ุงูุฅุฏุฎุงู ุงููุฏูู",
                estimated_time=300,
                can_skip=False,
                next_step="audio_test",
                previous_step="device_preparation",
            ),
            # ุฎุทูุฉ 6: ุงุฎุชุจุงุฑ ุงูุตูุช
            "audio_test": WizardStep(
                id="audio_test",
                type=WizardStepType.TESTING,
                title="๐ต ุงุฎุชุจุงุฑ ุงูุตูุช",
                subtitle="ุฏุนูุง ูุชุฃูุฏ ูู ุฃู ุงูุตูุช ูุนูู ุจุดูู ูุซุงูู",
                description="ุณูุฎุชุจุฑ ุงููุงููุฑูููู ูุงูุณูุงุนุฉ ููุชุฃูุฏ ูู ุฌูุฏุฉ ุงูุชูุงุนู ุงูุตูุชู.",
                instructions=[
                    "ุถุน ุงูุฌูุงุฒ ุนูู ูุณุงูุฉ ููุงุณุจุฉ ูู ุงูุทูู (1-2 ูุชุฑ)",
                    "ุชุฃูุฏ ูู ุนุฏู ูุฌูุฏ ุถูุถุงุก ูู ุงูุฎูููุฉ",
                    "ุงุทูุจ ูู ุงูุทูู ููู 'ูุฑุญุจุง' ุจุตูุช ูุงุถุญ",
                    "ุชุฃูุฏ ูู ุณูุงุน ุงูุฑุฏ ูู ุงูุฌูุงุฒ",
                ],
                media_files=[
                    {
                        "type": "audio",
                        "url": "/static/audio/test_sound.mp3",
                        "alt": "ุตูุช ุงุฎุชุจุงุฑ ููุชุฃูุฏ ูู ุนูู ุงูุณูุงุนุฉ",
                    },
                    {
                        "type": "gif",
                        "url": "/static/images/onboarding/audio_test.gif",
                        "alt": "ุงุฎุชุจุงุฑ ุงูุตูุช ุฎุทูุฉ ุจุฎุทูุฉ",
                    },
                ],
                input_fields=[
                    {
                        "id": "speaker_test",
                        "type": "button",
                        "label": "ุงุฎุชุจุงุฑ ุงูุณูุงุนุฉ",
                        "action": "play_test_sound",
                        "text": "๐ ุชุดุบูู ุตูุช ุงุฎุชุจุงุฑ",
                    },
                    {
                        "id": "microphone_test",
                        "type": "voice_recorder",
                        "label": "ุงุฎุชุจุงุฑ ุงููุงููุฑูููู",
                        "placeholder": "ุงุถุบุท ูุงุชุญุฏุซ",
                        "max_duration": 10,
                    },
                    {
                        "id": "audio_quality",
                        "type": "radio",
                        "label": "ููู ุชุจุฏู ุฌูุฏุฉ ุงูุตูุชุ",
                        "options": [
                            {"value": "excellent", "label": "ููุชุงุฒุฉ - ูุงุถุญุฉ ุฌุฏุงู"},
                            {"value": "good", "label": "ุฌูุฏุฉ - ูุงุถุญุฉ"},
                            {
                                "value": "acceptable",
                                "label": "ููุจููุฉ - ุจูุง ุจุนุถ ุงูุชุดููุด",
                            },
                            {"value": "poor", "label": "ุถุนููุฉ - ุบูุฑ ูุงุถุญุฉ"},
                        ],
                        "required": True,
                    },
                ],
                validation_rules={
                    "microphone_test": {"min_duration": 2},
                    "audio_quality": {"not_empty": True},
                },
                success_message="ุฑุงุฆุน! ุงูุตูุช ูุนูู ุจุดูู ูุซุงูู",
                error_messages={
                    "no_sound_detected": "ูู ูุชู ุณูุงุน ุฃู ุตูุชุ ุชุญูู ูู ุงููุงููุฑูููู",
                    "poor_quality": "ุฌูุฏุฉ ุงูุตูุช ุถุนููุฉุ ุฌุฑุจ ุชุญุณูู ุงููููุน ุฃู ุชูููู ุงูุถูุถุงุก",
                },
                help_text="ููุญุตูู ุนูู ุฃูุถู ุฌูุฏุฉ ุตูุชุ ุถุน ุงูุฌูุงุฒ ูู ููุงู ูุงุฏุฆ",
                estimated_time=180,
                can_skip=True,
                next_step="first_conversation",
                previous_step="wifi_setup",
            ),
            # ุฎุทูุฉ 7: ุฃูู ูุญุงุฏุซุฉ
            "first_conversation": WizardStep(
                id="first_conversation",
                type=WizardStepType.TESTING,
                title="๐ฌ ุฃูู ูุญุงุฏุซุฉ ูุน AI Teddy",
                subtitle="ุญุงู ุงูููุช ูุฃูู ุชูุงุนู ุญูููู!",
                description="ุฏุน ุทููู ูุฌุฑุจ ุงูุชุญุฏุซ ูุน AI Teddy Bear ูุฃูู ูุฑุฉ.",
                instructions=[
                    "ุงุทูุจ ูู ุงูุทูู ููู: 'ูุฑุญุจุงุ ูุง ุงุณููุ'",
                    "ุงูุชุธุฑ ุฑุฏ AI Teddy Bear",
                    "ุดุฌุน ุงูุทูู ุนูู ุทุฑุญ ุณุคุงู ุขุฎุฑ",
                    "ุชุฃูุฏ ูู ุฃู ุงูุฑุฏูุฏ ููุงุณุจุฉ ูุขููุฉ",
                ],
                media_files=[
                    {
                        "type": "video",
                        "url": "/static/videos/first_conversation_example.mp4",
                        "alt": "ูุซุงู ุนูู ุฃูู ูุญุงุฏุซุฉ",
                    }
                ],
                input_fields=[
                    {
                        "id": "conversation_started",
                        "type": "checkbox",
                        "label": "ุชุฃููุฏ ุงููุญุงุฏุซุฉ",
                        "options": [
                            {"value": "child_spoke", "label": "ุงูุทูู ุชุญุฏุซ ูุน AI Teddy"},
                            {
                                "value": "teddy_responded",
                                "label": "AI Teddy ุฑุฏ ุจุดูู ููุงุณุจ",
                            },
                            {"value": "child_happy", "label": "ุงูุทูู ูุณุชูุชุน ุจุงูุชูุงุนู"},
                            {
                                "value": "content_appropriate",
                                "label": "ุงููุญุชูู ููุงุณุจ ูุขูู",
                            },
                        ],
                        "required": True,
                        "min_selections": 3,
                    },
                    {
                        "id": "first_impression",
                        "type": "radio",
                        "label": "ูุง ูู ุงูุทุจุงุน ุงูุทูู ุงูุฃููุ",
                        "options": [
                            {"value": VoiceEmotion.EXCITED.value, "label": "ูุชุญูุณ ููุชูุงุนู"},
                            {"value": "curious", "label": "ูุถููู ูููุชู"},
                            {"value": "shy", "label": "ุฎุฌูู ููู ููุชู"},
                            {"value": "confused", "label": "ูุญุชุงุฑ ุฃู ุบูุฑ ูุชุฃูุฏ"},
                        ],
                        "required": True,
                    },
                ],
                validation_rules={"conversation_started": {"min_selections": 3}},
                success_message="๐ ุชูุงูููุง! ุชู ุฅุนุฏุงุฏ AI Teddy Bear ุจูุฌุงุญ",
                error_messages={
                    "conversation_incomplete": "ูุจุฏู ุฃู ุงููุญุงุฏุซุฉ ูู ุชูุชูู ุจูุฌุงุญ"
                },
                help_text="ุฅุฐุง ูุงู ุงูุทูู ุฎุฌููุงูุ ุดุฌุนู ุจูุทู ููุง ุชุฌุจุฑู ุนูู ุงูุชุญุฏุซ",
                estimated_time=300,
                can_skip=True,
                next_step="completion",
                previous_step="audio_test",
            ),
            # ุฎุทูุฉ 8: ุฅููุงู ุงูุฅุนุฏุงุฏ
            "completion": WizardStep(
                id="completion",
                type=WizardStepType.COMPLETION,
                title="๐ ุชู ุฅููุงู ุงูุฅุนุฏุงุฏ ุจูุฌุงุญ!",
                subtitle="AI Teddy Bear ุฌุงูุฒ ุงูุขู ููุฑุงููุฉ ุทููู",
                description="ุชูุงูููุง! ููุฏ ุฃูููุช ุฌููุน ุฎุทูุงุช ุงูุฅุนุฏุงุฏ ุจูุฌุงุญ. ุทููู ุงูุขู ูุณุชุทูุน ุงูุงุณุชูุชุงุน ุจุชุฌุฑุจุฉ ุขููุฉ ููููุฏุฉ.",
                instructions=[
                    "ูููู ูุทููู ุงูุขู ุงูุชุญุฏุซ ูุน AI Teddy ูู ุฃู ููุช",
                    "ุฑุงุฌุน ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูู ุญุณุงุจู ูููู ุฃูุฑ",
                    "ุชุฐูุฑ ุฃูู ููููู ุชุนุฏูู ุงูุชูุถููุงุช ูู ุฃู ููุช",
                    "ุงุญูุธ ูุนูููุงุช ุงูุงุชุตุงู ููุฏุนู ุงูููู",
                ],
                media_files=[
                    {
                        "type": "image",
                        "url": "/static/images/onboarding/completion_celebration.png",
                        "alt": "ุงุญุชูุงู ุจุฅููุงู ุงูุฅุนุฏุงุฏ",
                    }
                ],
                input_fields=[
                    {
                        "id": "satisfaction_rating",
                        "type": "rating",
                        "label": "ููู ุชููู ุชุฌุฑุจุฉ ุงูุฅุนุฏุงุฏุ",
                        "min": 1,
                        "max": 5,
                        "required": False,
                    },
                    {
                        "id": "feedback",
                        "type": "textarea",
                        "label": "ุฃู ุชุนูููุงุช ุฃู ุงูุชุฑุงุญุงุชุ",
                        "placeholder": "ุดุงุฑููุง ุฑุฃูู ูุชุญุณูู ุงูุชุฌุฑุจุฉ",
                        "required": False,
                        "max_length": 500,
                    },
                    {
                        "id": "notifications",
                        "type": "checkbox",
                        "label": "ุงูุชูุจููุงุช",
                        "options": [
                            {
                                "value": "safety_alerts",
                                "label": "ุชูุจููุงุช ุงูุฃูุงู ุงููููุฉ",
                            },
                            {"value": "updates", "label": "ุฅุดุนุงุฑุงุช ุงูุชุญุฏูุซุงุช"},
                            {"value": "tips", "label": "ูุตุงุฆุญ ุงูุงุณุชุฎุฏุงู ุงูุฃุณุจูุนูุฉ"},
                        ],
                        "required": False,
                    },
                ],
                validation_rules={},
                success_message="ุดูุฑุงู ูู! ุชู ุญูุธ ุชููููู ูููุงุญุธุงุชู",
                error_messages={},
                help_text="ููููู ุงููุตูู ููุฐุง ุงููุนุงูุฌ ูุฑุฉ ุฃุฎุฑู ูู ุงูุฅุนุฏุงุฏุงุช",
                estimated_time=120,
                can_skip=True,
                next_step=None,
                previous_step="first_conversation",
            ),
        }

    async def start_wizard(self, user_id: str) -> Dict[str, Any]:
        """ุจุฏุก ูุนุงูุฌ ุงูุฅุนุฏุงุฏ"""
        session = {
            "user_id": user_id,
            "current_step": "welcome",
            "started_at": datetime.now().isoformat(),
            "completed_steps": [],
            "step_data": {},
            "total_time": 0,
        }

        self.current_sessions[user_id] = session

        return {
            "session_id": user_id,
            "current_step": self.steps["welcome"],
            "progress": {"current": 1, "total": len(self.steps)},
            "estimated_remaining_time": sum(
                step.estimated_time for step in self.steps.values()
            ),
        }

    async def process_step(
        self, user_id: str, step_id: str, step_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """ูุนุงูุฌุฉ ุฎุทูุฉ ูู ุงููุนุงูุฌ"""
        if user_id not in self.current_sessions:
            return {"error": "No active wizard session"}

        session = self.current_sessions[user_id]
        step = self.steps.get(step_id)

        if not step:
            return {"error": "Invalid step"}

        # ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
        validation_result = await self._validate_step_data(step, step_data)
        if not validation_result["valid"]:
            return {
                "success": False,
                "errors": validation_result["errors"],
                "current_step": step,
            }

        # ุญูุธ ุจูุงูุงุช ุงูุฎุทูุฉ
        session["step_data"][step_id] = step_data
        session["completed_steps"].append(step_id)

        # ุงูุงูุชูุงู ููุฎุทูุฉ ุงูุชุงููุฉ
        next_step_id = step.next_step
        if next_step_id and next_step_id in self.steps:
            session["current_step"] = next_step_id
            next_step = self.steps[next_step_id]

            return {
                "success": True,
                "message": step.success_message,
                "next_step": next_step,
                "progress": {
                    "current": len(session["completed_steps"]) + 1,
                    "total": len(self.steps),
                },
            }
        else:
            # ุฅููุงู ุงููุนุงูุฌ
            return await self._complete_wizard(user_id)

    async def _validate_step_data(
        self, step: WizardStep, data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """ุงูุชุญูู ูู ุตุญุฉ ุจูุงูุงุช ุงูุฎุทูุฉ"""
        errors = []

        for field in step.input_fields:
            field_id = field["id"]
            field_value = data.get(field_id)

            # ุงูุชุญูู ูู ุงูุญููู ุงููุทููุจุฉ
            if field.get("required", False) and not field_value:
                errors.append(f"ุญูู '{field['label']}' ูุทููุจ")
                continue

            # ุชุทุจูู ููุงุนุฏ ุงูุชุญูู ุงููุฎุตุตุฉ
            field_rules = step.validation_rules.get(field_id, {})

            if (
                "min_length" in field_rules
                and len(str(field_value)) < field_rules["min_length"]
            ):
                errors.append(f"'{field['label']}' ูุตูุฑ ุฌุฏุงู")

            if (
                "max_length" in field_rules
                and len(str(field_value)) > field_rules["max_length"]
            ):
                errors.append(f"'{field['label']}' ุทููู ุฌุฏุงู")

            if (
                "min" in field_rules
                and isinstance(field_value, (int, float))
                and field_value < field_rules["min"]
            ):
                errors.append(f"'{field['label']}' ุฃูู ูู ุงูุญุฏ ุงููุณููุญ")

            if (
                "max" in field_rules
                and isinstance(field_value, (int, float))
                and field_value > field_rules["max"]
            ):
                errors.append(f"'{field['label']}' ุฃูุจุฑ ูู ุงูุญุฏ ุงููุณููุญ")

        return {"valid": len(errors) == 0, "errors": errors}

    async def _complete_wizard(self, user_id: str) -> Dict[str, Any]:
        """ุฅููุงู ุงููุนุงูุฌ"""
        session = self.current_sessions[user_id]

        # ูุนุงูุฌุฉ ุงูุจูุงูุงุช ุงูููุงุฆูุฉ
        final_data = {
            "user_id": user_id,
            "completed_at": datetime.now().isoformat(),
            "total_time": session["total_time"],
            "all_step_data": session["step_data"],
        }

        # ุชูุธูู ุงูุฌูุณุฉ
        del self.current_sessions[user_id]

        return {
            "success": True,
            "message": "๐ ุชู ุฅููุงู ุฅุนุฏุงุฏ AI Teddy Bear ุจูุฌุงุญ!",
            "wizard_completed": True,
            "final_data": final_data,
        }

    async def get_step(self, step_id: str) -> Optional[WizardStep]:
        """ุงูุญุตูู ุนูู ุฎุทูุฉ ูุนููุฉ"""
        return self.steps.get(step_id)

    async def skip_step(self, user_id: str, step_id: str) -> Dict[str, Any]:
        """ุชุฎุทู ุฎุทูุฉ (ุฅุฐุง ูุงู ูุณููุญุงู)"""
        step = self.steps.get(step_id)
        if not step or not step.can_skip:
            return {"error": "Cannot skip this step"}

        return await self.process_step(user_id, step_id, {"skipped": True})

    async def go_back(self, user_id: str) -> Dict[str, Any]:
        """ุงูุนูุฏุฉ ููุฎุทูุฉ ุงูุณุงุจูุฉ"""
        if user_id not in self.current_sessions:
            return {"error": "No active session"}

        session = self.current_sessions[user_id]
        current_step = self.steps[session["current_step"]]

        if current_step.previous_step:
            session["current_step"] = current_step.previous_step
            # ุฅุฒุงูุฉ ุงูุฎุทูุฉ ุงูุญุงููุฉ ูู ุงูููุชููุฉ ุฅุฐุง ูุงูุช ููุฌูุฏุฉ
            if session["current_step"] in session["completed_steps"]:
                session["completed_steps"].remove(session["current_step"])

            return {
                "success": True,
                "current_step": self.steps[current_step.previous_step],
            }

        return {"error": "Cannot go back from this step"}
