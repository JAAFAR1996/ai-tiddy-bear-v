"""
๐บ๏ธ AI TEDDY BEAR - ุฎุฑูุทุฉ ุฑุญูุฉ ุงููุณุชุฎุฏู
==========================================
ูุธุงู ุดุงูู ูุฅุฏุงุฑุฉ ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ูู ุงูุจุฏุงูุฉ ููููุงูุฉ
"""

from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Optional, Any
from datetime import datetime
import asyncio
import logging

logger = logging.getLogger(__name__)


class JourneyStage(Enum):
    """ูุฑุงุญู ุฑุญูุฉ ุงููุณุชุฎุฏู"""

    APP_DOWNLOAD = "app_download"
    PARENT_REGISTRATION = "parent_registration"
    CHILD_PROFILE_CREATION = "child_profile_creation"
    DEVICE_PAIRING = "device_pairing"
    FIRST_INTERACTION = "first_interaction"
    REGULAR_USAGE = "regular_usage"
    ISSUE_RESOLUTION = "issue_resolution"
    ACCOUNT_MANAGEMENT = "account_management"


class UserType(Enum):
    """ููุน ุงููุณุชุฎุฏู"""

    PARENT = "parent"
    CHILD = "child"
    ADMIN = "admin"


@dataclass
class JourneyStep:
    """ุฎุทูุฉ ูู ุฑุญูุฉ ุงููุณุชุฎุฏู"""

    id: str
    stage: JourneyStage
    title: str
    description: str
    expected_duration: int  # ุจุงูุฏูุงุฆู
    difficulty_level: int  # 1-5 (1=ุณูู ุฌุฏุงู, 5=ูุนูุฏ)
    user_type: UserType
    prerequisites: List[str]
    success_criteria: List[str]
    common_issues: List[str]
    help_resources: List[str]


@dataclass
class UserJourneyState:
    """ุญุงูุฉ ุฑุญูุฉ ุงููุณุชุฎุฏู ุงูุญุงููุฉ"""

    user_id: str
    current_stage: JourneyStage
    current_step: str
    started_at: datetime
    last_activity: datetime
    completed_steps: List[str]
    failed_attempts: Dict[str, int]
    help_requests: List[str]
    satisfaction_score: Optional[int]  # 1-10


class UserJourneyManager:
    """ูุฏูุฑ ุฑุญูุฉ ุงููุณุชุฎุฏู"""

    def __init__(self):
        self.journey_map = self._create_journey_map()
        self.active_journeys: Dict[str, UserJourneyState] = {}

    def _create_journey_map(self) -> Dict[str, JourneyStep]:
        """ุฅูุดุงุก ุฎุฑูุทุฉ ุฑุญูุฉ ุงููุณุชุฎุฏู ุงููุงููุฉ"""
        steps = {
            # 1. ุชุญููู ุงูุชุทุจูู
            "download_app": JourneyStep(
                id="download_app",
                stage=JourneyStage.APP_DOWNLOAD,
                title="ุชุญููู ุชุทุจูู AI Teddy Bear",
                description="ุชุญููู ูุชุซุจูุช ุงูุชุทุจูู ูู ูุชุฌุฑ ุงูุชุทุจููุงุช",
                expected_duration=5,
                difficulty_level=1,
                user_type=UserType.PARENT,
                prerequisites=[],
                success_criteria=[
                    "ุชู ุชุญููู ุงูุชุทุจูู ุจูุฌุงุญ",
                    "ุชู ูุชุญ ุงูุชุทุจูู ูุฃูู ูุฑุฉ",
                    "ุธููุฑ ุดุงุดุฉ ุงูุชุฑุญูุจ",
                ],
                common_issues=[
                    "ูุณุงุญุฉ ุชุฎุฒูู ุบูุฑ ูุงููุฉ",
                    "ูุดุงูู ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช",
                    "ุงูุชุทุจูู ุบูุฑ ูุชูุงูู ูุน ุงูุฌูุงุฒ",
                ],
                help_resources=[
                    "ุฏููู ุงูุชุญููู ูุงูุชุซุจูุช",
                    "ูุชุทูุจุงุช ุงููุธุงู",
                    "ุญู ูุดุงูู ุงูุชุญููู",
                ],
            ),
            # 2. ุชุณุฌูู ููู ุงูุฃูุฑ
            "parent_registration": JourneyStep(
                id="parent_registration",
                stage=JourneyStage.PARENT_REGISTRATION,
                title="ุชุณุฌูู ุญุณุงุจ ููู ุงูุฃูุฑ",
                description="ุฅูุดุงุก ุญุณุงุจ ุขูู ูููู ุงูุฃูุฑ ูุน ุงูุชุญูู ูู ุงููููุฉ",
                expected_duration=10,
                difficulty_level=2,
                user_type=UserType.PARENT,
                prerequisites=["download_app"],
                success_criteria=[
                    "ุชู ุฅุฏุฎุงู ุจูุงูุงุช ุตุญูุญุฉ",
                    "ุชู ุงูุชุญูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",
                    "ุชู ูุจูู ุดุฑูุท ุงูุงุณุชุฎุฏุงู",
                    "ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ",
                ],
                common_issues=[
                    "ุจุฑูุฏ ุฅููุชุฑููู ูุณุชุฎุฏู ูุณุจูุงู",
                    "ูููุฉ ูุฑูุฑ ุถุนููุฉ",
                    "ุนุฏู ูุตูู ุฑุณุงูุฉ ุงูุชุญูู",
                    "ูุดุงูู ูู ุงูุชุญูู ูู ุงููููุฉ",
                ],
                help_resources=[
                    "ุฏููู ุฅูุดุงุก ุญุณุงุจ ุขูู",
                    "ูุตุงุฆุญ ูููุฉ ุงููุฑูุฑ ุงููููุฉ",
                    "ุญู ูุดุงูู ุงูุชุญูู ูู ุงูุจุฑูุฏ",
                ],
            ),
            # 3. ุฅูุดุงุก ููู ุงูุทูู
            "create_child_profile": JourneyStep(
                id="create_child_profile",
                stage=JourneyStage.CHILD_PROFILE_CREATION,
                title="ุฅูุดุงุก ููู ุงูุทูู",
                description="ุฅุถุงูุฉ ูุนูููุงุช ุงูุทูู ูุชุฎุตูุต ุชุฌุฑุจุชู",
                expected_duration=15,
                difficulty_level=2,
                user_type=UserType.PARENT,
                prerequisites=["parent_registration"],
                success_criteria=[
                    "ุชู ุฅุฏุฎุงู ุงุณู ุงูุทูู ูุนูุฑู",
                    "ุชู ุงุฎุชูุงุฑ ุงูุชูุถููุงุช ุงูููุงุณุจุฉ",
                    "ุชู ุถุจุท ุฅุนุฏุงุฏุงุช ุงูุฃูุงู",
                    "ุชู ุญูุธ ุงูููู ุงูุดุฎุตู",
                ],
                common_issues=[
                    "ุนูุฑ ุงูุทูู ุฎุงุฑุฌ ุงููุทุงู ุงููุณููุญ (3-13)",
                    "ุนุฏู ููู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู",
                    "ูุดุงูู ูู ุญูุธ ุงูุจูุงูุงุช",
                ],
                help_resources=[
                    "ุฏููู ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ููุฃุทูุงู",
                    "ูุตุงุฆุญ ุงูุชุฎุตูุต ุญุณุจ ุงูุนูุฑ",
                    "ุดุฑุญ ููุฒุงุช ุงูุญูุงูุฉ",
                ],
            ),
            # 4. ุฑุจุท ุงูุฌูุงุฒ
            "device_pairing": JourneyStep(
                id="device_pairing",
                stage=JourneyStage.DEVICE_PAIRING,
                title="ุฑุจุท ุฌูุงุฒ AI Teddy Bear",
                description="ุฑุจุท ุฌูุงุฒ ESP32 ุจุญุณุงุจ ุงูุทูู",
                expected_duration=20,
                difficulty_level=4,
                user_type=UserType.PARENT,
                prerequisites=["create_child_profile"],
                success_criteria=[
                    "ุชู ุชูุตูู ุงูุฌูุงุฒ ุจุงููุงู ูุงู",
                    "ุชู ูุณุญ QR code ุจูุฌุงุญ",
                    "ุชู ุงูุชุญูู ูู ุงุชุตุงู ุงูุฌูุงุฒ",
                    "ุชู ุฑุจุท ุงูุฌูุงุฒ ุจููู ุงูุทูู",
                ],
                common_issues=[
                    "ูุดุงูู ูู ุงูุงุชุตุงู ุจุงููุงู ูุงู",
                    "QR code ุบูุฑ ูุงุถุญ ุฃู ุชุงูู",
                    "ุงูุฌูุงุฒ ูุฑุจูุท ูุณุจูุงู",
                    "ูุดุงูู ูู ุงูุดุจูุฉ ุงููุญููุฉ",
                ],
                help_resources=[
                    "ุฏููู ุฅุนุฏุงุฏ ุงููุงู ูุงู",
                    "ููุฏูู ุฑุจุท ุงูุฌูุงุฒ",
                    "ุญู ูุดุงูู ุงูุงุชุตุงู",
                    "ุฏููู ุงุณุชูุดุงู ุงูุฃุฎุทุงุก",
                ],
            ),
            # 5. ุฃูู ุชูุงุนู
            "first_interaction": JourneyStep(
                id="first_interaction",
                stage=JourneyStage.FIRST_INTERACTION,
                title="ุฃูู ุชูุงุนู ุตูุชู",
                description="ุงุฎุชุจุงุฑ ุงูุตูุช ูุฃูู ูุญุงุฏุซุฉ ูุน ุงูุทูู",
                expected_duration=10,
                difficulty_level=2,
                user_type=UserType.CHILD,
                prerequisites=["device_pairing"],
                success_criteria=[
                    "ุชู ุงุฎุชุจุงุฑ ุงููุงููุฑูููู",
                    "ุชู ุงุฎุชุจุงุฑ ุงูุณูุงุนุฉ",
                    "ูุฌุญ ุงูุทูู ูู ุงูุชุญุฏุซ ูุน AI Teddy",
                    "ุชู ุชููู ุฑุฏ ููุงุณุจ ูุขูู",
                ],
                common_issues=[
                    "ูุดุงูู ูู ุฌูุฏุฉ ุงูุตูุช",
                    "ุนุฏู ููู ุตูุช ุงูุทูู",
                    "ุชุฃุฎูุฑ ูู ุงูุงุณุชุฌุงุจุฉ",
                    "ุฎุฌู ุงูุทูู ูู ุงูุชุญุฏุซ",
                ],
                help_resources=[
                    "ุฏููู ุถุจุท ุงูุตูุช",
                    "ูุตุงุฆุญ ูุชุดุฌูุน ุงูุทูู",
                    "ุฃูุซูุฉ ุนูู ุงููุญุงุฏุซุงุช ุงูุฃููู",
                ],
            ),
            # 6. ุงูุงุณุชุฎุฏุงู ุงูููุชุธู
            "regular_usage": JourneyStep(
                id="regular_usage",
                stage=JourneyStage.REGULAR_USAGE,
                title="ุงูุงุณุชุฎุฏุงู ุงููููู",
                description="ุงุณุชุฎุฏุงู ููุชุธู ูุขูู ููุฌูุงุฒ",
                expected_duration=0,  # ูุณุชูุฑ
                difficulty_level=1,
                user_type=UserType.CHILD,
                prerequisites=["first_interaction"],
                success_criteria=[
                    "ุชูุงุนู ูููู ููุชุธู",
                    "ูุญุงุฏุซุงุช ุขููุฉ ููููุฏุฉ",
                    "ุนุฏู ูุฌูุฏ ูุดุงูู ุชูููุฉ",
                    "ุฑุถุง ุงูุทูู ูุงููุงูุฏ",
                ],
                common_issues=[
                    "ุชูุฑุงุฑ ููุณ ุงูุฃุณุฆูุฉ",
                    "ุงููุทุงุน ุงูุงุชุตุงู ุงููุคูุช",
                    "ุจุทุก ูู ุงูุงุณุชุฌุงุจุฉ",
                    "ูุญุชูู ุบูุฑ ููุงุณุจ",
                ],
                help_resources=[
                    "ุฏููู ุงูุงุณุชุฎุฏุงู ุงููููู",
                    "ุฃููุงุฑ ูููุญุงุฏุซุงุช",
                    "ูุฑุงูุจุฉ ุฃุฏุงุก ุงูุฌูุงุฒ",
                ],
            ),
            # 7. ุญู ุงููุดุงูู
            "issue_resolution": JourneyStep(
                id="issue_resolution",
                stage=JourneyStage.ISSUE_RESOLUTION,
                title="ุญู ุงููุดุงูู ุงูุชูููุฉ",
                description="ุงูุชุนุงูู ูุน ุงููุดุงูู ูุงูุฃุฎุทุงุก",
                expected_duration=30,
                difficulty_level=3,
                user_type=UserType.PARENT,
                prerequisites=["regular_usage"],
                success_criteria=[
                    "ุชู ุชุญุฏูุฏ ุงููุดููุฉ ุจุฏูุฉ",
                    "ุชู ุชุทุจูู ุงูุญู ุงูููุงุณุจ",
                    "ุนูุฏุฉ ุงูุฌูุงุฒ ููุนูู ุงูุทุจูุนู",
                    "ููุน ุชูุฑุงุฑ ุงููุดููุฉ",
                ],
                common_issues=[
                    "ุงููุทุงุน ุงูุฅูุชุฑูุช ุงููุทูู",
                    "ูุดุงูู ูู ุงูุชุญุฏูุซุงุช",
                    "ุฃุฎุทุงุก ูู ุงููุธุงู",
                    "ูุดุงูู ูู ุงูุฃุฌูุฒุฉ",
                ],
                help_resources=[
                    "ุฏููู ุงุณุชูุดุงู ุงูุฃุฎุทุงุก",
                    "ูุงุนุฏุฉ ุจูุงูุงุช ุงููุดุงูู ุงูุดุงุฆุนุฉ",
                    "ุงูุชูุงุตู ูุน ุงูุฏุนู ุงูููู",
                    "ููุฏูููุงุช ุงูุฅุตูุงุญ",
                ],
            ),
            # 8. ุฅุฏุงุฑุฉ ุงูุญุณุงุจ
            "account_management": JourneyStep(
                id="account_management",
                stage=JourneyStage.ACCOUNT_MANAGEMENT,
                title="ุฅุฏุงุฑุฉ ุงูุญุณุงุจ ูุงูุจูุงูุงุช",
                description="ุชุนุฏูู ุงูุฅุนุฏุงุฏุงุช ูุฅุฏุงุฑุฉ ุงูุจูุงูุงุช",
                expected_duration=15,
                difficulty_level=2,
                user_type=UserType.PARENT,
                prerequisites=["parent_registration"],
                success_criteria=[
                    "ุชู ุงููุตูู ูุฅุนุฏุงุฏุงุช ุงูุญุณุงุจ",
                    "ุชู ุชุนุฏูู ุงูุจูุงูุงุช ุจูุฌุงุญ",
                    "ุชู ุญูุธ ุงูุชุบููุฑุงุช",
                    "ุชู ุงูุชุฃููุฏ ุนูู ุงูุฅุฌุฑุงุกุงุช ุงูุญุณุงุณุฉ",
                ],
                common_issues=[
                    "ูุณูุงู ูููุฉ ุงููุฑูุฑ",
                    "ุตุนูุจุฉ ูู ุงููุตูู ููุฅุนุฏุงุฏุงุช",
                    "ุนุฏู ููู ุฎูุงุฑุงุช ุงูุญุฐู",
                    "ูุฎุงูู ูู ููุฏุงู ุงูุจูุงูุงุช",
                ],
                help_resources=[
                    "ุฏููู ุฅุฏุงุฑุฉ ุงูุญุณุงุจ",
                    "ุดุฑุญ ุณูุงุณุฉ ุงูุจูุงูุงุช",
                    "ุฎุทูุงุช ุงูุญุฐู ุงูุขูู",
                    "ุงุณุชุฑุฏุงุฏ ูููุฉ ุงููุฑูุฑ",
                ],
            ),
        }

        return steps

    async def start_journey(
        self, user_id: str, user_type: UserType
    ) -> UserJourneyState:
        """ุจุฏุก ุฑุญูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ"""
        journey_state = UserJourneyState(
            user_id=user_id,
            current_stage=JourneyStage.APP_DOWNLOAD,
            current_step="download_app",
            started_at=datetime.now(),
            last_activity=datetime.now(),
            completed_steps=[],
            failed_attempts={},
            help_requests=[],
            satisfaction_score=None,
        )

        self.active_journeys[user_id] = journey_state
        logger.info(f"Started journey for user {user_id}")

        return journey_state

    async def complete_step(
        self, user_id: str, step_id: str, success: bool = True
    ) -> bool:
        """ุชุณุฌูู ุฅููุงู ุฎุทูุฉ"""
        if user_id not in self.active_journeys:
            logger.error(f"No active journey for user {user_id}")
            return False

        journey = self.active_journeys[user_id]
        journey.last_activity = datetime.now()

        if success:
            journey.completed_steps.append(step_id)
            logger.info(f"User {user_id} completed step {step_id}")

            # ุงูุงูุชูุงู ููุฎุทูุฉ ุงูุชุงููุฉ
            next_step = self._get_next_step(step_id)
            if next_step:
                journey.current_step = next_step.id
                journey.current_stage = next_step.stage
        else:
            # ุชุณุฌูู ุงููุญุงููุฉ ุงููุงุดูุฉ
            if step_id not in journey.failed_attempts:
                journey.failed_attempts[step_id] = 0
            journey.failed_attempts[step_id] += 1

            logger.warning(
                f"User {user_id} failed step {step_id} (attempt {journey.failed_attempts[step_id]})"
            )

        return True

    def _get_next_step(self, current_step_id: str) -> Optional[JourneyStep]:
        """ุงูุญุตูู ุนูู ุงูุฎุทูุฉ ุงูุชุงููุฉ"""
        step_order = [
            "download_app",
            "parent_registration",
            "create_child_profile",
            "device_pairing",
            "first_interaction",
            "regular_usage",
        ]

        try:
            current_index = step_order.index(current_step_id)
            if current_index < len(step_order) - 1:
                next_step_id = step_order[current_index + 1]
                return self.journey_map[next_step_id]
        except (ValueError, IndexError):
            pass

        return None

    async def request_help(
        self, user_id: str, step_id: str, issue_type: str
    ) -> Dict[str, Any]:
        """ุทูุจ ุงููุณุงุนุฏุฉ ูู ุฎุทูุฉ ูุนููุฉ"""
        if user_id not in self.active_journeys:
            return {"error": "No active journey found"}

        journey = self.active_journeys[user_id]
        journey.help_requests.append(f"{step_id}:{issue_type}")

        step = self.journey_map.get(step_id)
        if not step:
            return {"error": "Step not found"}

        # ุชุญุฏูุฏ ุงููุณุงุนุฏุฉ ุงูููุงุณุจุฉ
        help_response = {
            "step": step.title,
            "issue": issue_type,
            "solutions": [],
            "resources": step.help_resources,
            "contact_support": False,
        }

        # ุฅุฐุง ูุดู ุงููุณุชุฎุฏู ุนุฏุฉ ูุฑุงุชุ ุงูุชุฑุญ ุงูุชูุงุตู ูุน ุงูุฏุนู
        if journey.failed_attempts.get(step_id, 0) >= 3:
            help_response["contact_support"] = True
            help_response["solutions"].append(
                "ูุจุฏู ุฃูู ุชูุงุฌู ุตุนูุจุฉ ูู ูุฐู ุงูุฎุทูุฉ. ููุตุญ ุจุงูุชูุงุตู ูุน ูุฑูู ุงูุฏุนู ูููุณุงุนุฏุฉ."
            )

        return help_response

    async def get_progress_summary(self, user_id: str) -> Dict[str, Any]:
        """ุงูุญุตูู ุนูู ููุฎุต ุชูุฏู ุงููุณุชุฎุฏู"""
        if user_id not in self.active_journeys:
            return {"error": "No active journey found"}

        journey = self.active_journeys[user_id]
        total_steps = len(self.journey_map)
        completed_steps = len(journey.completed_steps)

        return {
            "user_id": user_id,
            "current_stage": journey.current_stage.value,
            "current_step": journey.current_step,
            "progress_percentage": (completed_steps / total_steps) * 100,
            "completed_steps": completed_steps,
            "total_steps": total_steps,
            "failed_attempts": journey.failed_attempts,
            "help_requests": len(journey.help_requests),
            "journey_duration": (datetime.now() - journey.started_at).total_seconds()
            / 60,  # ุจุงูุฏูุงุฆู
            "satisfaction_score": journey.satisfaction_score,
        }

    async def update_satisfaction(self, user_id: str, score: int) -> bool:
        """ุชุญุฏูุซ ุฏุฑุฌุฉ ุฑุถุง ุงููุณุชุฎุฏู"""
        if user_id not in self.active_journeys:
            return False

        if 1 <= score <= 10:
            self.active_journeys[user_id].satisfaction_score = score
            logger.info(f"User {user_id} satisfaction score: {score}/10")
            return True

        return False
