# Pre-commit hooks for AI Teddy Bear
# Enforces test quality gates before commits

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: ['--line-length=120']

  # Import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=120']

  # Flake8 linting
  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=120', '--extend-ignore=E203,W503']
        additional_dependencies: [
          'flake8-bugbear',
          'flake8-comprehensions',
          'flake8-simplify'
        ]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-ll']
        files: ^src/

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: ['--ignore-missing-imports', '--strict']
        files: ^src/

  # Local custom hooks
  - repo: local
    hooks:
      # Check for test quality
      - id: test-quality-check
        name: Test Quality Check
        entry: python scripts/test_reality_check.py
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

      # No skipped tests
      - id: no-skip-tests
        name: No Skipped Tests
        entry: bash -c 'if grep -r "@pytest.mark.skip" tests/; then exit 1; fi'
        language: system
        pass_filenames: false
        files: ^tests/.*\.py$

      # No commented tests
      - id: no-commented-tests
        name: No Commented Tests
        entry: bash -c 'if grep -r "^\\s*#\\s*def\\s*test_" tests/; then exit 1; fi'
        language: system
        pass_filenames: false
        files: ^tests/.*\.py$

      # Ensure test files exist for new source files
      - id: test-file-exists
        name: Test File Exists
        entry: python scripts/check_test_exists.py
        language: system
        files: ^src/.*\.py$
        exclude: __init__\.py$

      # Run quick tests on commit
      - id: quick-test-run
        name: Quick Test Run
        entry: pytest -x --tb=short -m "not slow"
        language: system
        pass_filenames: false
        stages: [commit]

      # Coverage check (only on push)
      - id: coverage-check
        name: Coverage Check
        entry: pytest --cov=src --cov-fail-under=80 --cov-report=term-missing
        language: system
        pass_filenames: false
        stages: [push]

  # YAML/JSON validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: .*\.lock$|package-lock\.json$

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

# Configuration
default_stages: [commit, push]
fail_fast: false
verbose: true