name: Backup Services CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/infrastructure/backup/**'
      - 'scripts/backup*.py'
      - 'scripts/metrics_exporter.py'
      - 'deployment/backup/**'
      - 'requirements-backup.txt'
      - '.github/workflows/backup-services-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/infrastructure/backup/**'
      - 'scripts/backup*.py'
      - 'scripts/metrics_exporter.py'
      - 'deployment/backup/**'
      - 'requirements-backup.txt'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-teddy-bear/backup-services
  PYTHON_VERSION: '3.11'

jobs:
  # Security and code quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r src/infrastructure/backup/ scripts/backup*.py scripts/metrics_exporter.py \
               -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements-backup.txt

    - name: Run Black code formatter check
      run: |
        black --check --diff src/infrastructure/backup/ scripts/backup*.py scripts/metrics_exporter.py

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/infrastructure/backup/ scripts/backup*.py scripts/metrics_exporter.py

    - name: Run flake8 linting
      run: |
        flake8 src/infrastructure/backup/ scripts/backup*.py scripts/metrics_exporter.py \
               --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/infrastructure/backup/ scripts/backup*.py scripts/metrics_exporter.py \
               --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Run mypy type checking
      run: |
        mypy src/infrastructure/backup/ --ignore-missing-imports --no-strict-optional

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_backup_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-backup.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock

    - name: Set up test environment
      run: |
        mkdir -p test_backups test_data test_logs
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_backup_db"
        export REDIS_URL="redis://localhost:6379/0"
        export BACKUP_ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")

    - name: Run backup system tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_backup_db
        REDIS_URL: redis://localhost:6379/0
        BACKUP_ENCRYPTION_KEY: test_key_for_ci_only_not_secure
        COPPA_ENCRYPTION_KEY: test_coppa_key_for_ci_only
        TEST_DATA_PATH: ./test_data
        BACKUP_DATA_PATH: ./test_backups
        LOG_LEVEL: DEBUG
      run: |
        python -m pytest tests/infrastructure/backup/ -v \
               --cov=src/infrastructure/backup \
               --cov-report=xml \
               --cov-report=html \
               --cov-fail-under=80

    - name: Run backup integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_backup_db
        REDIS_URL: redis://localhost:6379/0
        BACKUP_ENCRYPTION_KEY: test_key_for_ci_only_not_secure
        COPPA_ENCRYPTION_KEY: test_coppa_key_for_ci_only
      run: |
        python -m pytest tests/integration/backup/ -v --tb=short

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backup-services
        name: backup-services-coverage

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # Build and push Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/backup/Dockerfile.backup
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Security scanning of Docker image
  image-security-scan:
    name: Image Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload scan results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-scan-results
        path: trivy-results.sarif

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, image-security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-backup.ai-teddybear.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|image: ai-teddy-bear/backup-services:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" \
               deployment/backup/kubernetes/backup-services.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/backup/kubernetes/backup-services.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/backup-orchestrator -n ai-teddy-backup --timeout=300s
        kubectl rollout status deployment/backup-scheduler -n ai-teddy-backup --timeout=300s
        kubectl rollout status deployment/backup-monitor -n ai-teddy-backup --timeout=300s

    - name: Run staging smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=backup-orchestrator -n ai-teddy-backup --timeout=120s
        
        # Run basic health checks
        kubectl exec -n ai-teddy-backup deployment/backup-orchestrator -- /app/healthcheck.sh

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, image-security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://backup.ai-teddybear.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Blue-Green Deployment
      run: |
        # Create new deployment with green suffix
        sed -i "s|backup-orchestrator|backup-orchestrator-green|g" deployment/backup/kubernetes/backup-services.yaml
        sed -i "s|backup-scheduler|backup-scheduler-green|g" deployment/backup/kubernetes/backup-services.yaml
        sed -i "s|backup-monitor|backup-monitor-green|g" deployment/backup/kubernetes/backup-services.yaml
        sed -i "s|image: ai-teddy-bear/backup-services:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" \
               deployment/backup/kubernetes/backup-services.yaml
        
        # Deploy green version
        kubectl apply -f deployment/backup/kubernetes/backup-services.yaml
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/backup-orchestrator-green -n ai-teddy-backup --timeout=600s
        kubectl rollout status deployment/backup-scheduler-green -n ai-teddy-backup --timeout=300s
        kubectl rollout status deployment/backup-monitor-green -n ai-teddy-backup --timeout=300s

    - name: Production Health Check
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=backup-orchestrator-green -n ai-teddy-backup --timeout=180s
        
        # Run comprehensive health checks
        kubectl exec -n ai-teddy-backup deployment/backup-orchestrator-green -- /app/healthcheck.sh
        
        # Test backup functionality
        kubectl exec -n ai-teddy-backup deployment/backup-orchestrator-green -- \
                python /app/scripts/backup_test_runner.py --suite backup_integrity

    - name: Switch Traffic to Green
      run: |
        # Update service selectors to point to green deployment
        kubectl patch service backup-orchestrator-service -n ai-teddy-backup \
                -p '{"spec":{"selector":{"app":"backup-orchestrator-green"}}}'
        
        # Wait for traffic switch
        sleep 30

    - name: Cleanup Blue Deployment
      run: |
        # Remove old blue deployment
        kubectl delete deployment backup-orchestrator -n ai-teddy-backup --ignore-not-found=true
        kubectl delete deployment backup-scheduler -n ai-teddy-backup --ignore-not-found=true
        kubectl delete deployment backup-monitor -n ai-teddy-backup --ignore-not-found=true
        
        # Rename green to blue for next deployment
        kubectl patch deployment backup-orchestrator-green -n ai-teddy-backup \
                -p '{"metadata":{"name":"backup-orchestrator"}}'
        kubectl patch deployment backup-scheduler-green -n ai-teddy-backup \
                -p '{"metadata":{"name":"backup-scheduler"}}'
        kubectl patch deployment backup-monitor-green -n ai-teddy-backup \
                -p '{"metadata":{"name":"backup-monitor"}}'

  # Post-deployment testing
  post-deploy-test:
    name: Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Run production backup tests
      run: |
        # Run comprehensive backup test suite
        kubectl create job --from=cronjob/backup-testing backup-testing-post-deploy -n ai-teddy-backup
        
        # Wait for job completion
        kubectl wait --for=condition=complete job/backup-testing-post-deploy -n ai-teddy-backup --timeout=1800s
        
        # Check job results
        kubectl logs job/backup-testing-post-deploy -n ai-teddy-backup

    - name: Verify metrics and monitoring
      run: |
        # Check if metrics are being exported
        kubectl port-forward service/backup-orchestrator-service 9090:9090 -n ai-teddy-backup &
        sleep 10
        
        # Test metrics endpoint
        curl -f http://localhost:9090/metrics || exit 1
        
        # Stop port forwarding
        pkill -f "kubectl port-forward"

    - name: Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: 'backup-services'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true