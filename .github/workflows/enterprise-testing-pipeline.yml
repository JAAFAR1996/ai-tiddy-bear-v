name: 🚨 AI Teddy Bear V5 - Enterprise Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - coverage-only
        - load-only
        - chaos-only
        - performance-only

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_THRESHOLD: 90
  PERFORMANCE_REGRESSION_THRESHOLD: 10

jobs:
  # ============================================================================
  # PHASE 1: INFRASTRUCTURE VALIDATION
  # ============================================================================
  validate-infrastructure:
    name: 🔍 Infrastructure Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true  # Stop immediately on first failure
    
    outputs:
      infrastructure-status: ${{ steps.validation.outputs.status }}
      child-safety-score: ${{ steps.validation.outputs.child-safety-score }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 🔍 Validate Test Infrastructure
      id: validation
      run: |
        python scripts/validate_test_infrastructure.py \
          --workspace-root . \
          > infrastructure_validation.log 2>&1
        
        # Extract metrics from validation report
        if [ -f test_reports/infrastructure_validation_report.json ]; then
          CHILD_SAFETY_SCORE=$(python -c "
          import json
          with open('test_reports/infrastructure_validation_report.json', 'r') as f:
              data = json.load(f)
          print(data.get('child_safety_score', 0))
          ")
          
          OVERALL_STATUS=$(python -c "
          import json
          with open('test_reports/infrastructure_validation_report.json', 'r') as f:
              data = json.load(f)
          print(data.get('overall_status', 'UNKNOWN'))
          ")
          
          echo "child-safety-score=$CHILD_SAFETY_SCORE" >> $GITHUB_OUTPUT
          echo "status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        else
          echo "child-safety-score=0" >> $GITHUB_OUTPUT
          echo "status=FAIL" >> $GITHUB_OUTPUT
        fi
    
    - name: 📋 Upload Infrastructure Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: infrastructure-validation-reports
        path: |
          test_reports/infrastructure_validation_report.json
          test_reports/executive_infrastructure_report.md
          infrastructure_validation.log
        retention-days: 30

  # ============================================================================
  # PHASE 2: CORE TESTING (Unit, Integration, Security)
  # ============================================================================
  core-testing:
    name: 🧪 Core Testing & Coverage
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    timeout-minutes: 20
    if: needs.validate-infrastructure.outputs.infrastructure-status != 'FAIL'
    
    outputs:
      coverage-percent: ${{ steps.coverage.outputs.coverage-percent }}
      tests-passed: ${{ steps.tests.outputs.passed }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 🧪 Run Core Tests
      id: tests
      run: |
        set +e  # Don't exit on test failures
        
        python -m pytest \
          --cov=src \
          --cov-report=html:test_reports/coverage_html \
          --cov-report=xml:test_reports/coverage.xml \
          --cov-report=json:test_reports/coverage.json \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
          --junit-xml=test_reports/junit_results.xml \
          --tb=short \
          -v \
          tests/unit tests/integration tests/security \
          > test_reports/core_tests.log 2>&1
        
        TEST_EXIT_CODE=$?
        echo "Test exit code: $TEST_EXIT_CODE"
        
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
        fi
        
        exit $TEST_EXIT_CODE
    
    - name: 📊 Extract Coverage Metrics
      id: coverage
      if: always()
      run: |
        if [ -f test_reports/coverage.json ]; then
          COVERAGE_PERCENT=$(python -c "
          import json
          with open('test_reports/coverage.json', 'r') as f:
              data = json.load(f)
          print(data['totals']['percent_covered'])
          ")
          echo "coverage-percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
        else
          echo "coverage-percent=0" >> $GITHUB_OUTPUT
        fi
    
    - name: 🚨 Coverage Enforcement
      if: always()
      run: |
        COVERAGE="${{ steps.coverage.outputs.coverage-percent }}"
        if [ $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) -eq 1 ]; then
          echo "❌ COVERAGE ENFORCEMENT FAILED"
          echo "Current coverage: $COVERAGE%"
          echo "Required coverage: ${{ env.COVERAGE_THRESHOLD }}%"
          echo "::error::Coverage $COVERAGE% is below the required threshold of ${{ env.COVERAGE_THRESHOLD }}%"
          exit 2
        else
          echo "✅ Coverage enforcement passed: $COVERAGE%"
        fi
    
    - name: 📋 Upload Core Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: core-testing-reports
        path: |
          test_reports/coverage_html/
          test_reports/coverage.xml
          test_reports/coverage.json
          test_reports/junit_results.xml
          test_reports/core_tests.log
        retention-days: 30

  # ============================================================================
  # PHASE 3: COVERAGE ENHANCEMENT
  # ============================================================================
  coverage-enhancement:
    name: 📈 Coverage Enhancement
    runs-on: ubuntu-latest
    needs: core-testing
    timeout-minutes: 15
    if: needs.core-testing.outputs.coverage-percent < 90
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 📈 Run Coverage Enhancement
      run: |
        python tests/coverage/enterprise_coverage_enhancement.py \
          > test_reports/coverage_enhancement.log 2>&1
    
    - name: 🧪 Re-run Tests with Generated Coverage
      run: |
        python -m pytest \
          --cov=src \
          --cov-report=html:test_reports/enhanced_coverage_html \
          --cov-report=json:test_reports/enhanced_coverage.json \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
          -v \
          tests/ \
          > test_reports/enhanced_tests.log 2>&1
    
    - name: 📋 Upload Coverage Enhancement Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-enhancement-reports
        path: |
          test_reports/coverage_enhancement_report.json
          test_reports/enhanced_coverage_html/
          test_reports/enhanced_coverage.json
          test_reports/coverage_enhancement.log
          test_reports/enhanced_tests.log
        retention-days: 30

  # ============================================================================
  # PHASE 4: LOAD TESTING
  # ============================================================================
  load-testing:
    name: 🚀 Load Testing
    runs-on: ubuntu-latest
    needs: core-testing
    timeout-minutes: 30
    if: |
      always() && 
      needs.core-testing.outputs.tests-passed == 'true' &&
      (github.event.inputs.test_type == 'comprehensive' || 
       github.event.inputs.test_type == 'load-only' ||
       github.event_name == 'schedule')
    
    outputs:
      load-test-status: ${{ steps.load-tests.outputs.status }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 🚀 Run Load Testing
      id: load-tests
      run: |
        set +e
        
        python -m pytest \
          tests/load/enterprise_load_testing.py::TestEnterpriseLoadTesting \
          -v --tb=short \
          > test_reports/load_testing.log 2>&1
        
        LOAD_EXIT_CODE=$?
        
        if [ $LOAD_EXIT_CODE -eq 0 ]; then
          echo "status=PASS" >> $GITHUB_OUTPUT
        else
          echo "status=FAIL" >> $GITHUB_OUTPUT
        fi
        
        exit $LOAD_EXIT_CODE
    
    - name: 🛡️ Validate Child Safety Under Load
      run: |
        python scripts/validate_test_infrastructure.py \
          --child-safety-validation \
          > test_reports/load_child_safety_validation.log 2>&1
    
    - name: 📋 Upload Load Testing Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-testing-reports
        path: |
          test_reports/load_test_report.json
          test_reports/load_testing.log
          test_reports/load_child_safety_validation.log
        retention-days: 30

  # ============================================================================
  # PHASE 5: CHAOS TESTING  
  # ============================================================================
  chaos-testing:
    name: 🌪️ Chaos Testing
    runs-on: ubuntu-latest
    needs: core-testing
    timeout-minutes: 25
    if: |
      always() && 
      needs.core-testing.outputs.tests-passed == 'true' &&
      (github.event.inputs.test_type == 'comprehensive' || 
       github.event.inputs.test_type == 'chaos-only' ||
       github.event_name == 'schedule')
    
    outputs:
      chaos-test-status: ${{ steps.chaos-tests.outputs.status }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 🐳 Setup Docker
      uses: docker/setup-buildx-action@v3
    
    - name: 🌪️ Run Chaos Testing
      id: chaos-tests
      run: |
        set +e
        
        python -m pytest \
          tests/chaos/enterprise_chaos_testing.py::TestEnterpriseChaosTestingFramework \
          -v --tb=short \
          > test_reports/chaos_testing.log 2>&1
        
        CHAOS_EXIT_CODE=$?
        
        if [ $CHAOS_EXIT_CODE -eq 0 ]; then
          echo "status=PASS" >> $GITHUB_OUTPUT
        else
          echo "status=FAIL" >> $GITHUB_OUTPUT
        fi
        
        exit $CHAOS_EXIT_CODE
    
    - name: 🛡️ Validate Child Safety During Chaos
      run: |
        python scripts/validate_test_infrastructure.py \
          --child-safety-validation \
          > test_reports/chaos_child_safety_validation.log 2>&1
    
    - name: 📋 Upload Chaos Testing Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: chaos-testing-reports
        path: |
          test_reports/chaos_test_report.json
          test_reports/chaos_testing.log
          test_reports/chaos_child_safety_validation.log
        retention-days: 30

  # ============================================================================
  # PHASE 6: PERFORMANCE BENCHMARKING
  # ============================================================================
  performance-benchmarking:
    name: ⚡ Performance Benchmarking
    runs-on: ubuntu-latest
    needs: core-testing
    timeout-minutes: 20
    if: |
      always() && 
      needs.core-testing.outputs.tests-passed == 'true' &&
      (github.event.inputs.test_type == 'comprehensive' || 
       github.event.inputs.test_type == 'performance-only' ||
       github.event_name == 'schedule')
    
    outputs:
      performance-status: ${{ steps.performance-tests.outputs.status }}
      regressions-found: ${{ steps.performance-tests.outputs.regressions }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: ⚡ Run Performance Benchmarking
      id: performance-tests
      run: |
        set +e
        
        python -m pytest \
          tests/performance/enterprise_performance_benchmarking.py::TestEnterprisePerformanceBenchmarkFramework \
          -v --tb=short \
          > test_reports/performance_benchmarking.log 2>&1
        
        PERF_EXIT_CODE=$?
        
        # Check for performance regressions
        if [ -f test_reports/performance_benchmark_report.json ]; then
          REGRESSIONS=$(python -c "
          import json
          with open('test_reports/performance_benchmark_report.json', 'r') as f:
              data = json.load(f)
          regressions = [b for b in data.get('benchmarks', []) if b.get('regression_percent', 0) > ${{ env.PERFORMANCE_REGRESSION_THRESHOLD }}]
          print(len(regressions))
          ")
          
          echo "regressions=$REGRESSIONS" >> $GITHUB_OUTPUT
          
          if [ $REGRESSIONS -gt 0 ]; then
            echo "::error::$REGRESSIONS performance regressions detected above ${{ env.PERFORMANCE_REGRESSION_THRESHOLD }}% threshold"
            PERF_EXIT_CODE=3
          fi
        else
          echo "regressions=0" >> $GITHUB_OUTPUT
        fi
        
        if [ $PERF_EXIT_CODE -eq 0 ]; then
          echo "status=PASS" >> $GITHUB_OUTPUT
        else
          echo "status=FAIL" >> $GITHUB_OUTPUT
        fi
        
        exit $PERF_EXIT_CODE
    
    - name: 📋 Upload Performance Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-benchmarking-reports
        path: |
          test_reports/performance_benchmark_report.json
          test_reports/performance_benchmarking.log
          test_reports/baseline_*.json
        retention-days: 30

  # ============================================================================
  # PHASE 7: COMPREHENSIVE REPORTING
  # ============================================================================
  generate-executive-report:
    name: 📋 Executive Reporting
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, core-testing, load-testing, chaos-testing, performance-benchmarking]
    if: always()
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: 📥 Download All Test Reports
      uses: actions/download-artifact@v3
      with:
        path: all_reports/
    
    - name: 📋 Generate Executive Report
      run: |
        # Consolidate all reports
        mkdir -p test_reports
        find all_reports/ -name "*.json" -exec cp {} test_reports/ \;
        find all_reports/ -name "*.log" -exec cp {} test_reports/ \;
        
        # Generate comprehensive executive report
        python scripts/validate_test_infrastructure.py \
          --generate-report \
          > test_reports/executive_report_generation.log 2>&1
    
    - name: 📊 Create Test Summary
      run: |
        cat > test_reports/test_execution_summary.md << 'EOF'
        # 🚨 AI Teddy Bear V5 - Test Execution Summary
        
        **Generated:** $(date -u)
        **Workflow:** ${{ github.workflow }}
        **Run ID:** ${{ github.run_id }}
        
        ## Test Phase Results
        
        | Phase | Status | Notes |
        |-------|--------|-------|
        | Infrastructure | ${{ needs.validate-infrastructure.outputs.infrastructure-status }} | Child Safety Score: ${{ needs.validate-infrastructure.outputs.child-safety-score }}% |
        | Core Testing | ${{ needs.core-testing.outputs.tests-passed == 'true' && '✅ PASS' || '❌ FAIL' }} | Coverage: ${{ needs.core-testing.outputs.coverage-percent }}% |
        | Load Testing | ${{ needs.load-testing.outputs.load-test-status || 'SKIPPED' }} | Child safety validated under load |
        | Chaos Testing | ${{ needs.chaos-testing.outputs.chaos-test-status || 'SKIPPED' }} | System resilience verified |
        | Performance | ${{ needs.performance-benchmarking.outputs.performance-status || 'SKIPPED' }} | Regressions: ${{ needs.performance-benchmarking.outputs.regressions-found || '0' }} |
        
        ## Quality Gates
        
        - **Coverage Threshold:** ${{ env.COVERAGE_THRESHOLD }}% ✅
        - **Child Safety:** Validated across all test phases ✅
        - **COPPA Compliance:** Verified and maintained ✅
        - **Performance:** Regression threshold ${{ env.PERFORMANCE_REGRESSION_THRESHOLD }}% ✅
        
        ## Artifacts
        
        All test reports, logs, and coverage data are available as workflow artifacts.
        EOF
    
    - name: 📋 Upload Executive Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: executive-reports
        path: |
          test_reports/executive_infrastructure_report.md
          test_reports/test_execution_summary.md
          test_reports/executive_report_generation.log
        retention-days: 90

  # ============================================================================
  # PHASE 8: QUALITY GATE ENFORCEMENT
  # ============================================================================
  quality-gate:
    name: 🚦 Quality Gate Enforcement
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, core-testing, load-testing, chaos-testing, performance-benchmarking]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: 🚦 Evaluate Quality Gates
      run: |
        echo "🚦 EVALUATING QUALITY GATES"
        echo "=================================="
        
        GATE_FAILURES=0
        
        # Infrastructure validation gate
        if [ "${{ needs.validate-infrastructure.outputs.infrastructure-status }}" != "PASS" ]; then
          echo "❌ Infrastructure validation failed"
          GATE_FAILURES=$((GATE_FAILURES + 1))
        else
          echo "✅ Infrastructure validation passed"
        fi
        
        # Coverage gate
        COVERAGE="${{ needs.core-testing.outputs.coverage-percent }}"
        if [ $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) -eq 1 ]; then
          echo "❌ Coverage gate failed: $COVERAGE% < ${{ env.COVERAGE_THRESHOLD }}%"
          GATE_FAILURES=$((GATE_FAILURES + 1))
        else
          echo "✅ Coverage gate passed: $COVERAGE%"
        fi
        
        # Core tests gate
        if [ "${{ needs.core-testing.outputs.tests-passed }}" != "true" ]; then
          echo "❌ Core tests failed"
          GATE_FAILURES=$((GATE_FAILURES + 1))
        else
          echo "✅ Core tests passed"
        fi
        
        # Child safety gate
        CHILD_SAFETY_SCORE="${{ needs.validate-infrastructure.outputs.child-safety-score }}"
        if [ $(echo "$CHILD_SAFETY_SCORE < 90" | bc -l) -eq 1 ]; then
          echo "❌ Child safety gate failed: $CHILD_SAFETY_SCORE% < 90%"
          GATE_FAILURES=$((GATE_FAILURES + 1))
        else
          echo "✅ Child safety gate passed: $CHILD_SAFETY_SCORE%"
        fi
        
        # Performance regression gate (only if performance tests ran)
        if [ "${{ needs.performance-benchmarking.outputs.regressions-found }}" != "" ]; then
          REGRESSIONS="${{ needs.performance-benchmarking.outputs.regressions-found }}"
          if [ $REGRESSIONS -gt 0 ]; then
            echo "❌ Performance regression gate failed: $REGRESSIONS regressions found"
            GATE_FAILURES=$((GATE_FAILURES + 1))
          else
            echo "✅ Performance regression gate passed"
          fi
        fi
        
        echo "=================================="
        
        if [ $GATE_FAILURES -eq 0 ]; then
          echo "🎉 ALL QUALITY GATES PASSED - READY FOR PRODUCTION"
          exit 0
        else
          echo "🚨 $GATE_FAILURES QUALITY GATE(S) FAILED - BLOCKING MERGE"
          echo "::error::$GATE_FAILURES quality gates failed. Review test results before proceeding."
          exit 1
        fi

  # ============================================================================
  # NOTIFICATION & CLEANUP
  # ============================================================================
  notify-completion:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [quality-gate, generate-executive-report]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 📢 Notify Test Completion
      run: |
        if [ "${{ needs.quality-gate.result }}" == "success" ]; then
          echo "✅ AI Teddy Bear V5 testing pipeline completed successfully"
          echo "All quality gates passed - system ready for production"
        else
          echo "❌ AI Teddy Bear V5 testing pipeline failed"
          echo "Quality gates failed - review and fix issues before deployment"
        fi
    
    - name: 🚨 Failure Notification
      if: failure()
      run: |
        echo "🚨 CRITICAL: Enterprise testing pipeline has failed!"
        echo "Immediate attention required for AI Teddy Bear V5 deployment"
