name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - canary
        - rolling

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    outputs:
      scan-results: ${{ steps.security-gate.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety semgrep
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep SAST scan
        run: |
          semgrep --config=auto src/ --json --output=semgrep-report.json || true
          semgrep --config=auto src/

      - name: COPPA Compliance Check
        run: |
          python scripts/coppa_compliance_check.py
          echo "COPPA compliance validation passed"

      - name: Child Safety Content Validation
        run: |
          python scripts/child_safety_validator.py
          echo "Child safety content validation passed"

      - name: Security Gate Decision
        id: security-gate
        run: |
          # Parse security reports and make go/no-go decision
          python scripts/security_gate.py bandit-report.json safety-report.json semgrep-report.json
          echo "passed=true" >> $GITHUB_OUTPUT

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.scan-results == 'true'
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      quality-gate: ${{ steps.quality-gate.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements-test.txt
          pip install -r requirements.txt

      - name: Run linting
        run: |
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
          black --check src/
          isort --check-only src/

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --maxfail=5

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v --maxfail=3

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; root = ET.parse('coverage.xml').getroot(); print(float(root.attrib['line-rate']) * 100)")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Quality Gate
        id: quality-gate
        run: |
          COVERAGE=${{ steps.coverage.outputs.percentage }}
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "Quality gate passed with $COVERAGE% coverage"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "Quality gate failed with $COVERAGE% coverage (minimum 80% required)"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-images:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: needs.code-quality.outputs.quality-gate == 'true'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy container scan
        run: |
          trivy image --severity HIGH,CRITICAL --format json --output trivy-report.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          trivy image --severity HIGH,CRITICAL ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-report.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging-api.aiteddybear.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to staging with blue-green
        run: |
          cd deployment/kubernetes
          ./deploy.sh staging blue-green ${{ needs.build-images.outputs.image-tag }}

      - name: Run staging health checks
        run: |
          ./scripts/health_check.sh staging
          ./scripts/coppa_compliance_test.sh staging

      - name: Run staging smoke tests
        run: |
          pytest tests/staging/ -v --maxfail=1

  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          # K6 load testing
          docker run --rm -v $PWD/tests/performance:/scripts grafana/k6 run /scripts/load-test.js

      - name: Child safety performance validation
        run: |
          python scripts/child_safety_performance_test.py

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.aiteddybear.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Pre-deployment backup
        run: |
          ./scripts/production/backup.sh

      - name: Deploy to production
        run: |
          STRATEGY=${{ github.event.inputs.deploy_strategy || 'blue-green' }}
          cd deployment/kubernetes
          ./deploy.sh production $STRATEGY ${{ needs.build-images.outputs.image-tag }}

      - name: Production health checks
        run: |
          ./scripts/health_check.sh production
          ./scripts/coppa_compliance_test.sh production

      - name: Update Sentry release
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases new ${{ github.sha }}
          sentry-cli releases set-commits ${{ github.sha }} --auto
          sentry-cli releases finalize ${{ github.sha }}
          sentry-cli releases deploys ${{ github.sha }} new -e production

      - name: Notify deployment success
        run: |
          # Send deployment notifications
          python scripts/deployment_notification.py success production ${{ github.sha }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Execute rollback
        run: |
          ./scripts/production/rollback.sh

      - name: Verify rollback
        run: |
          ./scripts/health_check.sh production

      - name: Notify rollback
        run: |
          python scripts/deployment_notification.py rollback production ${{ github.sha }}