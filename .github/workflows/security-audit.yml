# 🔒 AI TEDDY BEAR - GitHub Actions Security Workflow
# ==============================================
# فحص تلقائي للثغرات الأمنية والتبعيات

name: "🛡️ Security & Dependency Audit"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # تشغيل يومي في 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'نوع الفحص'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'vulnerabilities'
          - 'dependencies'

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-audit:
    name: "📦 تدقيق التبعيات"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semver requests
          
      - name: "🔍 Run Custom Dependency Audit"
        run: |
          python security/dependency_audit.py
          
      - name: "📊 Upload Audit Results"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-audit-results
          path: |
            security/audits/
            requirements-lock.txt
          retention-days: 30

  security-scan:
    name: "🔒 فحص الثغرات الأمنية"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: "🛡️ Install Security Tools"
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semver
          pip install -r requirements.txt
          
      - name: "🔍 Safety Check (Known Vulnerabilities)"
        run: |
          safety check --json --output safety-report.json || true
          
      - name: "🔒 Bandit Security Scan"
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: "📋 Generate Security Summary"
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f safety-report.json ]; then
            echo "### 📦 Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
try:
    with open('safety-report.json') as f:
        data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    if vulns:
        print(f'❌ Found {len(vulns)} vulnerabilities')
        for v in vulns[:5]:  # Top 5
            print(f'- **{v.get(\"package_name\", \"Unknown\")}**: {v.get(\"vulnerability\", \"Unknown\")}')
    else:
        print('✅ No known vulnerabilities found')
except:
    print('⚠️ Could not parse safety report')
            " >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Code Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -f bandit-report.json ]; then
            python -c "
import json
try:
    with open('bandit-report.json') as f:
        data = json.load(f)
    results = data.get('results', [])
    if results:
        high = len([r for r in results if r.get('issue_severity') == 'HIGH'])
        medium = len([r for r in results if r.get('issue_severity') == 'MEDIUM'])
        print(f'⚠️ Found {len(results)} security issues (High: {high}, Medium: {medium})')
    else:
        print('✅ No security issues found in code')
except:
    print('⚠️ Could not parse bandit report')
            " >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: "📊 Upload Security Reports"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30
          
      - name: "❌ Fail on Critical Vulnerabilities"
        run: |
          # فحص الثغرات الحرجة
          python -c "
import json
import sys

critical_found = False

# فحص Safety
try:
    with open('safety-report.json') as f:
        safety_data = json.load(f)
    vulns = safety_data.get('vulnerabilities', [])
    critical_vulns = [v for v in vulns if 'critical' in v.get('vulnerability', '').lower()]
    if critical_vulns:
        print(f'🚨 CRITICAL: Found {len(critical_vulns)} critical vulnerabilities!')
        critical_found = True
except:
    pass

# فحص Bandit
try:
    with open('bandit-report.json') as f:
        bandit_data = json.load(f)
    results = bandit_data.get('results', [])
    high_issues = [r for r in results if r.get('issue_severity') == 'HIGH']
    if len(high_issues) > 5:  # أكثر من 5 مشاكل عالية الخطورة
        print(f'🚨 CRITICAL: Found {len(high_issues)} high-severity security issues!')
        critical_found = True
except:
    pass

if critical_found:
    sys.exit(1)
else:
    print('✅ No critical security issues found')
          "

  dependabot-config:
    name: "🤖 تحديث تكوين Dependabot"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "🤖 Create/Update Dependabot Config"
        run: |
          mkdir -p .github
          cat > .github/dependabot.yml << 'EOF'
          # 🤖 AI TEDDY BEAR - Dependabot Configuration
          # ==========================================
          # تحديث تلقائي للتبعيات مع فحص أمني
          
          version: 2
          updates:
            # Python dependencies
            - package-ecosystem: "pip"
              directory: "/"
              schedule:
                interval: "daily"
                time: "04:00"
                timezone: "UTC"
              open-pull-requests-limit: 10
              target-branch: "develop"
              commit-message:
                prefix: "⬆️"
                include: "scope"
              labels:
                - "dependencies"
                - "security"
              reviewers:
                - "JAAFAR1996"
              assignees:
                - "JAAFAR1996"
              # تجاهل التحديثات الرئيسية للحزم الحرجة
              ignore:
                - dependency-name: "fastapi"
                  update-types: ["version-update:semver-major"]
                - dependency-name: "sqlalchemy"
                  update-types: ["version-update:semver-major"]
                - dependency-name: "cryptography"
                  update-types: ["version-update:semver-major"]
              # تحديث فوري للثغرات الأمنية
              security-updates:
                enabled: true
                
            # GitHub Actions
            - package-ecosystem: "github-actions"
              directory: "/"
              schedule:
                interval: "weekly"
                day: "monday"
                time: "04:00"
                timezone: "UTC"
              commit-message:
                prefix: "🔧"
              labels:
                - "github-actions"
                - "ci-cd"
          EOF
          
      - name: "📝 Commit Dependabot Config"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/dependabot.yml
          git diff --staged --quiet || git commit -m "🤖 Update Dependabot configuration"
          git push || true

  security-policy:
    name: "📋 تحديث سياسة الأمان"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: "📥 Checkout Repository"
        uses: actions/checkout@v4
        
      - name: "📋 Create Security Policy"
        run: |
          cat > SECURITY.md << 'EOF'
          # 🔒 سياسة الأمان - AI Teddy Bear
          
          ## 🚨 الإبلاغ عن الثغرات الأمنية
          
          إذا اكتشفت ثغرة أمنية في AI Teddy Bear، يرجى الإبلاغ عنها بشكل مسؤول:
          
          1. **لا تقم بنشر الثغرة علناً**
          2. أرسل تقريراً مفصلاً إلى: security@ai-teddy-bear.com
          3. سنرد عليك خلال 48 ساعة
          4. سنعمل معك لحل المشكلة
          5. سنشكرك في تقرير الأمان (إذا رغبت)
          
          ## 🛡️ الثغرات المدعومة
          
          | الإصدار | مدعوم بالتحديثات الأمنية |
          | ------- | ----------------------- |
          | 1.x.x   | ✅ نعم                  |
          | < 1.0   | ❌ لا                   |
          
          ## 🔒 أفضل الممارسات الأمنية
          
          ### للمطورين:
          - استخدم `requirements-lock.txt` للإصدارات الثابتة
          - شغل `python security/dependency_audit.py` قبل كل إصدار
          - راجع تقارير الأمان في `security/audits/`
          - تابع تحديثات Dependabot
          
          ### للنشر:
          - استخدم متغيرات البيئة للمفاتيح السرية
          - فعل HTTPS في الإنتاج
          - استخدم قواعد بيانات منفصلة للإنتاج
          - راقب السجلات الأمنية
          
          ## 📞 التواصل الطارئ
          
          في حالة اكتشاف ثغرة حرجة في الإنتاج:
          
          1. **فوري**: أوقف الخدمة المتأثرة
          2. **خلال ساعة**: قم بتطبيق الإصلاح المؤقت
          3. **خلال 24 ساعة**: انشر الإصلاح النهائي
          4. **خلال 48 ساعة**: أرسل تقريراً للمستخدمين
          
          ---
          
          آخر تحديث: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
      - name: "📝 Commit Security Policy"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add SECURITY.md
          git diff --staged --quiet || git commit -m "📋 Update security policy"
          git push || true
