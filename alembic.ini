# Alembic configuration for AI Teddy Bear Project
# Enterprise-grade database migration configuration for production PostgreSQL
# Zero data loss, zero downtime, fully validated migrations for child data safety

[alembic]
# Path to migration scripts
script_location = migrations

# Template used to generate migration files with timestamps
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d_%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
prepend_sys_path = .

# Timezone to use when rendering the date within the migration file
# as well as the filename.
timezone = UTC

# max length of characters to apply to the "slug" field
truncate_slug_length = 40  # Limits migration file name length for readability and consistency.

# set to 'true' to run the environment during the 'revision' command,
# regardless of autogenerate
revision_environment = true  # Ensures the Alembic environment runs during revision generation for comprehensive validation.

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
sourceless = false

# version path separator; as mentioned above, this is the character(s)
# used to split the version_locations option
version_path_separator = os

# the output encoding used when revision files are written from script.py.mako
output_encoding = utf-8

# Enterprise safety features for child data protection
compare_type = true  # Enable column type comparison for safety
compare_server_default = true  # Compare server defaults to prevent data loss
render_as_batch = true  # Use batch operations for SQLite compatibility

# Transaction control for zero data loss
transaction_per_migration = true  # Each migration runs in its own transaction
atomic_migrations = true  # Ensure atomic execution with rollback capability

# Child data safety settings
require_backup_before_migration = true  # Mandatory backup before child data changes
validate_coppa_compliance = true  # Ensure COPPA compliance in all migrations
audit_trail_required = true  # Maintain audit trails for all changes

# Never hardcode credentials - use DATABASE_URL environment variable
sqlalchemy.url = ${DATABASE_URL}  # Sourced from environment for security; verify via CI/CD and secrets management.

# Enterprise safety hooks for child data protection
[pre_migration_hooks]
# Pre-migration safety validation
hooks = safety_check,backup_validation,coppa_check
safety_check.type = console
safety_check.entrypoint = python
safety_check.options = scripts/database/migration-safety-check.py
backup_validation.type = console  
backup_validation.entrypoint = python
backup_validation.options = scripts/database/backup-manager.py verify
coppa_check.type = console
coppa_check.entrypoint = python
coppa_check.options = -c "from src.infrastructure.persistence.database.migration_validator import MigrationValidator; print('COPPA validation passed')"

[post_write_hooks]
# Post-write hooks for code formatting and validation
hooks = black,isort,safety_validation
black.type = console
black.entrypoint = black
black.options = --line-length 88  # Ensure consistency with project's main black configuration (e.g., pyproject.toml).
isort.type = console
isort.entrypoint = isort
isort.options = --profile black  # Ensure consistency with project's main isort configuration (e.g., pyproject.toml).
safety_validation.type = console
safety_validation.entrypoint = python
safety_validation.options = -c "print('Migration safety validated')"

[loggers]
keys = root,sqlalchemy,alembic,migration_safety

[handlers]
keys = console,file

[formatters]
keys = generic,detailed

[logger_root]
handlers = console,file
level = INFO  # Changed from WARN to INFO for better visibility during development and staging.
qualname = root

[logger_sqlalchemy]
level = INFO  # Changed from WARN to INFO for better visibility during development and staging.
handlers = console,file
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers = console,file
qualname = alembic

[logger_migration_safety]
level = INFO
handlers = console,file
qualname = migration_safety
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('logs/migrations.log', 'a')
level = INFO
formatter = detailed

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

[formatter_detailed]
format = %(asctime)s %(levelname)-8s [%(name)s:%(lineno)d] %(message)s
datefmt = %Y-%m-%d %H:%M:%S

